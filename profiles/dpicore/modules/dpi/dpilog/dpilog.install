<?php 

/**
 * Implementation of hook_install
 *
 * Disable the dblog module
 */
function dpilog_install() {
  // Disable dblog
  try {
    module_disable(array('dblog'));
  }
  catch(Exception $e){
    drupal_set_message('Please uninstall module "Database logging" (dblog) before using DPILog.', 'error');
  }
}

/**
 * Implementation of hook_enable
 *
 * Disable the dblog module
 */
function dpilog_enable(){
  // Disable dblog
  try {
    module_disable(array('dblog'));
  }
  catch(Exception $e){
    drupal_set_message('Please uninstall module "Database logging" (dblog) before using DPILog.', 'warning');
  }
}

/**
 * Implementation of hook_modules_enabled
 *
 * Check wheter the dblog modules is enabled or not
 */
function dpilog_modules_enabled($modules) {
  if (in_array('dblog', $modules)) {
    drupal_set_message(t('Dblog should not be enabled when DPILog is active. Please disable Dblog module.'), 'error');
  }
}

/**
 * Implementation of hook_uninstall
 *
 * Delete variables
 */
function dpilog_uninstall(){
  dpi_variable_del('dpilog_configuration_granularity');
  dpi_variable_del('dpilog_configuration_display'); 
}

/**
 * Implements hook_schema
 */
function dpilog_schema() {
  $indexes = array(
    'log_name' => array('log_name'),
    'id' => array('id'),
    'timestamp' => array('timestamp'),
  );

  $schema['dpilog_logs'] = array(
     'description'=>"de",
     'fields' => array(
        'lid' => array('type' => 'serial','unsigned' => TRUE, 'not null' => TRUE),
        'log_name' => array('type' => 'varchar', 'length' => 254, 'not null' => TRUE),
        'action' => array('type' => 'varchar', 'length' => 254, 'not null' => TRUE),
        'thread_id' => array('type' => 'varchar', 'length' => 254, 'not null' => TRUE),
        'message' => array('type' => 'text', 'not null' => TRUE),
        'variables' => array('type' => 'text', 'not null' => FALSE),
        'trace' => array('type' => 'text', 'not null' => FALSE),
        'id' => array('type' => 'varchar', 'length' => 254, 'not null' => FALSE),
        'user' => array('type' => 'int', 'size' => 'medium', 'not null' => TRUE),
        'severity' => array('type' => 'int', 'size' => 'medium', 'not null' => TRUE),
        'timestamp' => array('type' => 'int',  'not null' => TRUE),
      ),
     'primary key' => array('lid'),
     'indexes' => $indexes,
     'mysql_engine' => 'MyISAM',
    );
  
  // Smart watchdogs
  $schema['dpilog_watchdog'] = array(
    'description' => 'Watchdog events.',
    'fields' => array(
      'wid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique watchdog event ID.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of log message, for example "user" or "page not found."',
      ),
      'message' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Text of log message to be passed into the t() function.',
      ),
      'variables' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
      ),
      'severity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
      ),
      'location'  => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'URL of the origin of the event.',
      ),
      'referer' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'URL of referring page.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Hostname of the user who triggered the event.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'Unix timestamp of when event occurred.',
      ),
      'processid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'Random generated key to group same PHP process events',
      ),
      'backtrace' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'default' => null,
        'description' => 'Gzipped PHP backtrace.',
      ),
    ),
    'primary key' => array('wid'),
    'indexes' => array(
      'type' => array('type'),
      'uid' => array('uid'),
      'severity' => array('severity'),
      'processid' => array('processid'),
    ),
    'mysql_engine' => 'MyISAM',
  );

  return $schema;
}

/**
 * Install dpilog_watchdog table
 *
 * Install dpilog_watchdog table and disable the dblog module
 */
function dpilog_update_7101(){
  $schema = drupal_get_schema('dpilog_watchdog', TRUE);
  db_create_table('dpilog_watchdog', $schema);

  // Disable dblog
  try {
    module_disable(array('dblog'));
  }
  catch(Exception $e){
    drupal_set_message('Please uninstall module "Database logging" (dblog) before using DPILog.', 'warning');
  }
}
