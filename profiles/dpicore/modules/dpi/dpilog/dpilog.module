<?php 
module_load_include('inc', 'dpilog', 'dpilog.private');

/**
 * Implementation of hook_boot
 */
function dpilog_boot(){
  global $dpilog_thread_id;
  $dpilog_thread_id = mt_rand(1000, mt_getrandmax()); // faster than uniqid()
  // hook_exit() is not always called
  // register_shutdown_function() too rude?
  drupal_register_shutdown_function('_dpilog_shutdown');
}

/**
 * Implements hook_init().
 */
function dpilog_init() {
  $dpilog_path = drupal_get_path('module', 'dpilog');
  if (arg(0) == 'admin' && arg(1) == 'dpi' && arg(2) == 'dpilogs') {
    // Add the CSS for this module
    drupal_add_css($dpilog_path.'/css/dpilog-watchdog.css','module', 'all', FALSE);
    drupal_add_js($dpilog_path .'/js/dpilog-watchdog.js',array('scope' => 'header', 'weight' => 5));
  }
}

/**
 * Implementation of hook_menu
 */
function dpilog_menu() {
  $items = array();

  /*---- DPI Logs ----*/
  $items['admin/dpi247/dpilogs'] = array(
    'title' => 'DPI Logs and Watchdogs',
    'description' => 'View events that have recently been logged.',
    'page callback' => 'dpilog_page_view_list',
    'access arguments' => array('access site reports'),
    'file' => 'includes/dpilog.pages.admin.inc',
  );

  $items['admin/dpi247/dpilogs/dpilog'] = array(
    'title' => 'DPI Logs',
    'page callback' => 'dpilog_page_view_list',
    'access arguments' => array('view dpilog'),
    'file' => 'includes/dpilog.pages.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/dpi247/dpilogs/dpilog/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/dpi247/dpilogs/dpilog/timeline'] = array(
    'title' => 'TimeLine',
    'page callback' => 'dpilog_page_view_timeline',
    'access arguments' => array('view dpilog'),
    'file' => 'includes/dpilog.pages.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/dpi247/dpilogs/dpilog/timeline/json'] = array(
    'title' => 'TimeLine',
    'page callback' => 'dpilog_page_view_timeline_json',
    'access arguments' => array('view dpilog'),
    'file' => 'includes/dpilog.pages.admin.inc',
  );

  $items['admin/dpi247/dpilogs/configure/dpilog/flush'] = array(
    'title' => 'Flush',
    'page arguments' => array('dpilog_form_page_flush_form'),
    'access arguments'=>array('flush dpilog'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/dpilog.pages.admin.inc',
    'weight' => 3,
  );

  $items['admin/dpi247/dpilogs/dpilog/view/log/%'] = array(
    'title' => 'Logs',
    'page callback' => 'dpilog_log_event',
    'page arguments' => array(6),
    'access arguments' => array('view dpilog'),
    'file' => 'includes/dpilog.pages.admin.inc',
  );

  /*---- Smart watchdogs ----*/
  $items['admin/reports/dblog'] = array(
    'title' => 'DPI Watchdogs',
    'description' => 'View events that have recently been logged.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/dpi247/dpilogs/watchdog'),
    'access arguments' => array('access site reports'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/dpi247/dpilogs/watchdog'] = array(
    'title' => 'DPI Watchdogs',
    'description' => 'View events that have recently been logged.',
    'page callback' => 'dpilog_watchdog_overview',
    'access arguments' => array('access site reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'includes/dpilog.pages.watchdog.inc',
  );

  $items['admin/dpi247/dpilogs/watchdog/listing'] = array(
    'title' => 'Recent watchdogs',
    'description' => 'Listing of recent log messages.',
    'page callback' => 'dpilog_watchdog_overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/dpilog.pages.watchdog.inc',
  );

  $items['admin/dpi247/dpilogs/watchdog/event/%'] = array(
    'title' => 'Details',
    'page callback' => 'dpilog_watchdog_event',
    'page arguments' => array(5),
    'access arguments' => array('access site reports'),
    'file' => 'includes/dpilog.pages.watchdog.inc',
  );

  $items['admin/dpi247/dpilogs/configure/watchdog/delete/%'] = array(
    'title' => 'Delete module configuration for wallylog',
    'page callback' => 'dpilog_watchdog_delete_rule',
    'page arguments' => array(6),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/dpilog.pages.watchdog.inc',
  );

  /*---- Configuration forms ----*/
  $items['admin/dpi247/dpilogs/configure'] = array(
    'title' => 'Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpilog_form_page_configure_granularity_form'),
    'access arguments' => array('configure dpilog'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/dpilog.pages.admin.inc',
    'weight' => 3,
  );

  $items['admin/dpi247/dpilogs/configure/dpilog'] = array(
    'title' => 'Logs granularity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpilog_form_page_configure_granularity_form'),
    'access arguments' => array('configure dpilog'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/dpilog.pages.admin.inc',
    'weight' => 1,
  );

  $items['admin/dpi247/dpilogs/configure/watchdog'] = array(
    'title' => 'Watchdogs',
    'description' => 'Configure watchdog.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpilog_watchdog_configure_page'),
    'access arguments' => array('access site reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'includes/dpilog.pages.watchdog.inc',
  );

  $items['admin/dpi247/dpilogs/configure/export'] = array(
    'title' => 'Import/Export watchdogs configuration',
    'description' => 'Import/Export watchdogs configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpilog_watchdog_configure_export_page'),
    'access arguments' => array('access site reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'includes/dpilog.pages.watchdog.inc',
  );

  return $items;
}

function dpilog_theme(){
  return array(
    'colorselect' => array(
      'render element' => 'element',
      'file'=>'templates/theme.inc',
    ),
    'dpilog_form_page_configure_granularity_form'=>array(
      'render element' => 'form',
      'file'=>'templates/theme.inc',
    ),
    'dpilog_form_page_configure_display_form'=>array(
      'render element' => 'form',
      'file'=>'templates/theme.inc',
    ),
    'dpilog_watchdog_message' => array(
      'variables' => array('event' => NULL, 'as_link' => FALSE, 'length' => 56),
      'file' => 'templates/theme-watchdog.inc',
    ),
    'dpilog_watchdog_rules_settings_form' => array(
      'render element' => 'form',
      'file'=>'templates/theme-watchdog.inc',
    ),
    'dpilog_watchdog_rules_settings_selectbox' => array(
      'render element' => 'element',
      'file'=>'templates/theme-watchdog.inc',
    ),
    'dpilog_wathchog_backtrace' => array(
      'variables' => array('backtrace' => NULL),
      'file' => 'templates/theme-watchdog.inc',
    ),
  );
}

function dpilog_permission(){
  return array(
    'view dpilog' => array(
      'title' => t('View dpilog'),
      'description' => t('View dpilog.'),
    ),
    'configure dpilog' => array(
      'title' => t('Configure dpilog'),
      'description' => t('Define wich actions should be loged and where.'),
    ),
    'flush dpilog' => array(
      'title' => t('Flush dpilog'),
      'description' => t('Flush all logs'),
    )
  );
}

function dpilog_exit(){
  global $dpilog_delayed_save;

  if(count($dpilog_delayed_save['dpilog'])){
    $querry=db_insert('dpilog_logs')
    ->fields(array('log_name','action','thread_id','message','variables','id','user','severity','trace','timestamp'));
    foreach($dpilog_delayed_save['dpilog'] as $record){
      $querry->values((array)$record);
    }
    $querry->execute();
  }
}

/**
 * Implements hook_cron().
 *
 * Controls the size of the log table, paring it to 'dpilog_watchdog_row_limit' messages.
 */
function dpilog_cron() {
  $watchdog_table_name = _dpilog_get_table_name('watchdogs');
  // Cleanup the watchdog table.
  $row_limit = dpi_variable_get('dpilog_watchdog_row_limit', 1000);

  // For row limit n, get the wid of the nth row in descending wid order.
  // Counting the most recent n rows avoids issues with wid number sequences,
  // e.g. auto_increment value > 1 or rows deleted directly from the table.
  if ($row_limit > 0) {
    $min_row = db_select($watchdog_table_name, 'w')
      ->fields('w', array('wid'))
      ->orderBy('wid', 'DESC')
      ->range($row_limit - 1, 1)
      ->execute()->fetchField();

    // Delete all table entries older than the nth row, if nth row was found.
    if ($min_row) {
      db_delete($watchdog_table_name)
        ->condition('wid', $min_row, '<')
        ->execute();
    }
  }
}

/**
 * Implements hook_watchdog().
 *
 * Note: Some values may be truncated to meet database column size restrictions.
 */
function dpilog_watchdog(array $log_entry) {
  global $dpilog_thread_id;
  module_load_include('inc', 'dpilog', 'dpilog.private');
  if(!$log_entry || !is_array($log_entry) || empty($log_entry))
    return FALSE;
  switch (_dpilog_watchdog_get_action($log_entry)) {
    case "ignore": // Don't record the event
      return FALSE;
      break;
    case "save_backtrace": // Save with trace
      try {
        $backtrace = gzcompress(json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)),4);
        //'backtrace' => gzcompress(serialize(debug_backtrace()),4) /// PDOException: You cannot serialize or unserialize PDOStatement instances
      }
      catch (Exception $e) {
        $backtrace = null; // FAIL
      } 
      break;
    case "save_simple": // Simple watchdog
    default:
      $backtrace = null;
      break;
  }
  $watchdogs = &_dpilog_static('watchdogs');
  $log = array(
    'uid' => $log_entry['uid'],
    'type' => substr($log_entry['type'], 0, 64),
    'message' => $log_entry['message'],
    'variables' => serialize($log_entry['variables']),
    'severity' => $log_entry['severity'],
    'location' => $log_entry['request_uri'],
    'referer' => $log_entry['referer'],
    'hostname' => substr($log_entry['ip'], 0, 128),
    'timestamp' => $log_entry['timestamp'],
    'processid' => $dpilog_thread_id,
    'backtrace' => $backtrace
  );
  $watchdogs[] = $log;
}

/**
 * Initialize and get the static list of logs
 * @param the key you want to retrieve. Default "watchdogs", "dpilogs", also "processid"
 * @return {void} The value associated to the key
 */
function &_dpilog_static($key = "watchdogs") {
  static $dpilog_static = array();
  global $dpilog_thread_id;
  if(!trim($key))
    return FALSE;
  if(empty($dpilog_static)){
    $dpilog_static['processid'] = $dpilog_thread_id;
    $dpilog_static['watchdogs'] = array();
    $dpilog_static['dpilogs'] = array();
  }
  if(!isset($dpilog_static[$key]))
    $dpilog_static[$key] = array();
  return $dpilog_static[$key];
}

/**
 * Called by register_shutdown_function
 * in hook_boot(), it is used to
 * save non-ignored watchdogs.
 * @return void
 */
function _dpilog_shutdown(){
  $watchdogs = &_dpilog_static('watchdogs');
  if(!$watchdogs)
    return FALSE;
  return _dpilog_watchdog_save($watchdogs);
}

/**
 * Inserts watchdogs into the database.
 * @param  Array $watchdogs Watchdogs to save
 * @return void
 */
function _dpilog_watchdog_save($watchdogs){
  module_load_include('inc', 'dpilog', 'dpilog.private');
  $watchdog_table_name = _dpilog_get_table_name('watchdogs');

  $insert = Database::getConnection('default', 'default')->insert($watchdog_table_name);
  foreach($watchdogs as $watchdog){
    $insert->fields(array_keys($watchdog));
    $insert->values(array_values($watchdog));
  }
  $insert->execute();
}
