<?php
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.api');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.fields');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.entity');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.private');
include_once 'dpicontenttypes.features.inc';



/**
* Implementation of hook_menu()
*/
function dpicontenttypes_menu(){
  $items = array();
  
  $dpiproperties_uri = 'dpiproperties/%dpiproperties';
  $dpiproperties_uri_argument_position = 1;
  
  $items[$dpiproperties_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('dpiproperties', $dpiproperties_uri_argument_position),
    'page callback' => 'dpiproperties_view',
    'page arguments' => array($dpiproperties_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'dpiproperties', $dpiproperties_uri_argument_position),
    'file' => 'dpicontenttypes.entity.inc',
  );
  
  $items[$dpiproperties_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items[$dpiproperties_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpiproperties_form', $dpiproperties_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'dpiproperties', $dpiproperties_uri_argument_position),
    'file' => 'dpicontenttypes.entity.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  $items['admin/structure/dpiproperties-types/%dpiproperties_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpiproperties_type_form_delete_confirm', 4),
    'access arguments' => array('administer dpiproperties types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dpicontenttypes.entity.inc',
  );
  
  return $items;
}

/**
* Implementation of hook_permission()
*/
function dpicontenttypes_permission(){
  return array(
    'administer dpiproperties' =>  array(
      'title' => t('Administer DPI properties'),
      'restrict access' => TRUE,
    ),
    'view dpiproperties' => array(
      'title' => t('View DPI properties'),
    ),
    'edit dpiproperties' => array(
      'title' => t('Edit DPI properties'),
    ),
    'create dpiproperties' => array(
      'title' => t('Create DPI properties'),
    ),
  );
}


/**
 * Implementation of hook_node_insert
 * @param object $node
 */
function dpicontenttypes_node_insert($node){
  if (in_array($node->type, dpicontenttypes_api_getdpicontenttypes())){
    _dpicontenttypes_entityinsertdpiproperties($node, 'node', $node->nid);
  }
}
/**
*
* Implementation of hook_delete
* @param Object $node
*/
function dpicontenttypes_node_delete($node) {
  //Delete the dpiproperties entry corresponding to the node
  _dpicontenttypes_entitydeletedpiproperties($node, 'node', $node->nid);
}

/**
 * 
 * Implementation of hook_scald_atom_insert
 * @param Object $atom
 */
function dpicontenttypes_scald_atom_insert($atom){
  _dpicontenttypes_entityinsertdpiproperties($atom, 'scald_atom', $atom->sid);
}
function dpicontenttypes_scald_atom_delete($atom){
  _dpicontenttypes_entitydeletedpiproperties($atom, 'scald_atom', $atom->sid);
}
/**
 * 
 * Implementation of hook_entity_property_info_alter
 * Add Dpiproperties setter to add dpiproperties on a node
 * @param Array $info
 */
function dpicontenttypes_entity_property_info_alter(&$info){

  $product_id = array(
    'label' => t("ProductID"),  
    'type' => 'text',
    'setter callback' => 'entity_property_dpiproperties_node_set_properties',
    'getter callback' => 'entity_property_dpiproperties_node_get_properties',
  );
  $external_reference = array(
    'label' => t("External Reference"), 
    'type' => 'text', 
    'setter callback' => 'entity_property_dpiproperties_node_set_properties',
    'getter callback' => 'entity_property_dpiproperties_node_get_properties',
  );
  $external_reference_2 = array(
    'label' => t("External Reference 2"), 
    'type' => 'text', 
    'setter callback' => 'entity_property_dpiproperties_node_set_properties',
    'getter callback' => 'entity_property_dpiproperties_node_get_properties',
  );
  $source = array(
    'label' => t("Source"), 
    'type' => 'text', 
    'setter callback' => 'entity_property_dpiproperties_node_set_properties',
    'getter callback' => 'entity_property_dpiproperties_node_get_properties',
  );
  
  //Set to the article_package
  $info['node']['bundles']['article_package']['properties']['field_product_id'] = $product_id;
  $info['node']['bundles']['article_package']['properties']['field_external_reference'] = $external_reference;
  $info['node']['bundles']['article_package']['properties']['field_external_reference_2'] = $external_reference_2;
  $info['node']['bundles']['article_package']['properties']['field_source'] = $source;
  
  //Set to the atoms image
  $info['scald_atom']['bundles']['image']['properties']['field_product_id'] = $product_id;
  $info['scald_atom']['bundles']['image']['properties']['field_external_reference'] = $external_reference;
  $info['scald_atom']['bundles']['image']['properties']['field_external_reference_2'] = $external_reference_2;
  $info['scald_atom']['bundles']['image']['properties']['field_source'] = $source;
  //Set to the atoms linklist
  $info['scald_atom']['bundles']['link_list']['properties']['field_product_id'] = $product_id;
  $info['scald_atom']['bundles']['link_list']['properties']['field_external_reference'] = $external_reference;
  $info['scald_atom']['bundles']['link_list']['properties']['field_external_reference_2'] = $external_reference_2;
  $info['scald_atom']['bundles']['link_list']['properties']['field_source'] = $source;
}


/**
 * Implement hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function article_package_form($node, $form_state) {
  return node_content_form($node, $form_state);
}
function gallery_package_form($node, $form_state) {
  return node_content_form($node, $form_state);
}
function poll_package_form($node, $form_state) {
  return node_content_form($node, $form_state);
}



//@todo: documenter cette partie on fait l'alter uniquement pour fournir un build mode suplémentaire...
/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 */
function dpicontenttypes_entity_info_alter(&$entity_info) {
  // Add our new view mode to the list of view modes...
  $entity_info['node']['view modes']['article_package'] = array(
    'label' => t('Target default'),
    'custom settings' => FALSE,
  );
  foreach (dpiproperties_types() as $type => $info) {
    $entity_info['dpiproperties']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/dpiproperties-types/manage/%dpiproperties_type',
        'real path' => 'admin/structure/dpiproperties-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function dpicontenttypes_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' && $plugin == "behavior") {
	return 'plugins/entityreference/' . $plugin;
  }
  if ($module == 'dpimport' && $plugin == 'importer') {
    return 'plugins/dpimport/' . $plugin;
  }
}



/**
 * Implements hook_library().
 */
function dpicontenttypes_library() {
  $path = drupal_get_path('module', 'dpicontenttypes');
  $libraries['library'] = array(
    'title' => 'Atom reference library',
    'website' => 'http://drupal.org/project/scald',
    'version' => '1.x',
    'js' => array(
      $path . '/js/dpiatom_reference.js' => array(),
    ),
    'css' => array(
      $path . '/css/dpiatom_reference.css' => array(),
    ),
  );

  return $libraries;
}
/**
 * 
 * Implementation of hook_entity_presave
 * @param Object $entity
 * @param String $type
 */
function wallycontenttypes_entity_presave($entity, $type) {
  //@todo Pour tous les objets de type field, vérifier si l'ancien fichier = le nouveau, si non, mettre un timeout sur l'ancien pour qu'il soit supprimer dans x temps (voir nodeapi de wallymport en drupal 6)
}
