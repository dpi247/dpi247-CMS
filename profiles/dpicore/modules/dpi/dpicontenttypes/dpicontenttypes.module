<?php
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.api');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.fields');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.entity');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.private');
include_once 'dpicontenttypes.features.inc';



/**
 * Implementation of hook_menu()
 */
function dpicontenttypes_menu(){
  $items = array();

  $dpiproperties_uri = 'dpiproperties/%dpiproperties';
  $dpiproperties_uri_argument_position = 1;

  $items[$dpiproperties_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('dpiproperties', $dpiproperties_uri_argument_position),
    'page callback' => 'dpiproperties_view',
    'page arguments' => array($dpiproperties_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'dpiproperties', $dpiproperties_uri_argument_position),
    'file' => 'dpicontenttypes.entity.inc',
  );

  $items[$dpiproperties_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$dpiproperties_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpiproperties_form', $dpiproperties_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'dpiproperties', $dpiproperties_uri_argument_position),
    'file' => 'dpicontenttypes.entity.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/structure/dpiproperties-types/%dpiproperties_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpiproperties_type_form_delete_confirm', 4),
    'access arguments' => array('administer dpiproperties types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dpicontenttypes.entity.inc',
  );

  
  $items['node/%node/dpiproperties'] = array(
    'title' => 'DPIProperties',
    'page callback' => 'dpicontenttypes_entity_properties',
    'page arguments' => array('node', 1),
    'access arguments' => array('view dpiproperties'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dpicontenttypes.pages.inc',
    'file path' => drupal_get_path('module', 'dpicontenttypes').'/includes',
    
    'weight' => 50,
  );
  
  $items['atom/%scald_atom/dpiproperties'] = array(
    'title' => 'DPIProperties',
    'page callback' => 'dpicontenttypes_entity_properties',
    'page arguments' => array('scald_atom', 1),
    'access arguments' => array('view dpiproperties'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dpicontenttypes.pages.inc',
    'file path' => drupal_get_path('module', 'dpicontenttypes').'/includes',
    
    'weight' => 50,
  );
  return $items;
}

/**
 * Implementation of hook_permission()
 */
function dpicontenttypes_permission(){
  return array(
    'administer dpiproperties' =>  array(
      'title' => t('Administer DPI properties'),
      'restrict access' => TRUE,
    ),
    'view dpiproperties' => array(
      'title' => t('View DPI properties'),
    ),
    'edit dpiproperties' => array(
      'title' => t('Edit DPI properties'),
    ),
    'create dpiproperties' => array(
      'title' => t('Create DPI properties'),
    ),
  );
}


/**
 * Implementation of hook_node_insert
 * @param object $node
 */
function dpicontenttypes_node_insert($node){
  if (in_array($node->type, dpicontenttypes_api_getdpicontenttypes())){
    _dpicontenttypes_entityinsertdpiproperties($node, 'node', $node->nid);
  }
}
/**
 *
 * Implementation of hook_delete
 * @param Object $node
 */
function dpicontenttypes_node_delete($node) {
  //Delete the dpiproperties entry corresponding to the node
  _dpicontenttypes_entitydeletedpiproperties($node, 'node', $node->nid);
}


function dpicontenttypes_theme(){
  return array(
    'atom_links_lists'=>array(
      'variables'=>array(
        'content'=>NULL,
      ),
      'template' => 'atom-links-list',
      'path' => drupal_get_path('module', 'dpicontenttypes') . '/templates',
      'file' => 'theme.inc',
    ),
  );
}


function dpicontenttypes_entity_prepare_view($entity_type, $entities, $langcode = NULL){

}


/**
 * Implements hook_scald_contexts().
 */
function dpicontenttypes_scald_contexts() {
  return array(
    'dpi_inline'      => array(
      'title'           => t('DPI Inline'),
      'description'     => t('When atom is embedded within  a textarea.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'dpi_mediabox'      => array(
      'title'           => t('DPI MediaBox'),
      'description'     => t('When atom is embedded within  a field.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
  );

}




/**
 * Implements hook_scald_atom_providers.
 * Tell Scald that we'll be providing some twitter atoms.
 */
function dpicontenttypes_scald_atom_providers() {
  return array(
    'links_list' => 'Links lists'
  );
}
function dpicontenttypes_scald_add_form(&$form, &$form_state) {
  return array();
}
function dpicontenttypes_scald_add_form_fill(&$atom, $form, $form_state) {
}


/**
 * Implements hook_scald_prerender.
 * This should be used only for dpi inline and dpi mediabox scald's context
 */
function dpicontenttypes_scald_render($atom, $context, $options, $mode) {
  switch ($context) {
    case 'debug':
      $output = '<pre class="debug">' . print_r($atom, TRUE) . '</pre>';
      break;

    case 'no-access':
      $output = theme('scald_render_error', array('context' => $context, 'message' => t('You do not have access to view this Atom.')));
      break;

    case 'invalid-id':
      $output = theme('scald_render_error', array('context' => $context, 'message' => t('Invalid Scald ID.')));
      break;

    case 'deleted':
      $output = theme('scald_render_error', array('context' => $context, 'message' => t('Atom deleted!')));
      break;

    default:
      // If this is a custom context created through the UI, we use a special
      // render.

      if($context == 'dpi_mediabox' || $context == 'dpi_inline'){
        $content = scald_atom_view($atom, $context);
        
        //:We only use the render of the atom
        // no need of the field_links_list field rendering
        if($atom->type=='links_list'){
          unset($content['field_linkitems  ']);
        }
        else{

        }
        $output = drupal_render($content);
      }
      // Else, returns the title as we don't know what to render.
      else {
        $output = $atom->rendered->title;
      }
      break;
  }


  return $output;

}
/**
 * Implements hook_scald_prerender.
 */
function dpicontenttypes_scald_prerender($atom, $context, $options, $mode) {

  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      // we are not in the library display view, so we need more than the title and thumbnail

      // Tell scald core what he should display
      $view_mode = "full";

      $temporary_content = scald_atom_view($atom, $context );


      $atom->rendered->player = theme('atom_links_lists', array('content' => $temporary_content));

      //Don't show title, not needed
      $atom->rendered->title = '';
    }
  }
}

/**
 *
 * Implementation of hook_scald_atom_insert
 * Create a dpi properties linked to the new atom
 * @param Object $atom
 */
function dpicontenttypes_scald_atom_insert($atom){
  _dpicontenttypes_entityinsertdpiproperties($atom, 'scald_atom', $atom->sid);
}
/**
 *
 * Implementation of hook_scald_atom_delete
 * Delete the dpiproperties linked to the atom
 * @param Object $atom
 */
function dpicontenttypes_scald_atom_delete($atom){
  _dpicontenttypes_entitydeletedpiproperties($atom, 'scald_atom', $atom->sid);
}



/**
 * Implement hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function package_form($node, $form_state) {
  return node_content_form($node, $form_state);
}




/**
 * Implements hook_ctools_plugin_directory().
 */
function dpicontenttypes_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' && $plugin == "behavior") {
    return 'plugins/entityreference/' . $plugin;
  }
  if ($module == 'dpimport' && $plugin == 'importer') {
    return 'plugins/dpimport/' . $plugin;
  }
}



/**
 * Implements hook_library().
 */
function dpicontenttypes_library() {
  $path = drupal_get_path('module', 'dpicontenttypes');
  $libraries['library'] = array(
    'title' => 'Atom reference library',
    'website' => 'http://drupal.org/project/scald',
    'version' => '1.x',
    'js' => array(
      $path . '/js/dpiatom_reference.js' => array(),
    ),
    'css' => array(
      $path . '/css/dpiatom_reference.css' => array(),
    ),
  );

  return $libraries;
}
/**
 *
 * Implementation of the hook_dpicontenttypes_provider
 *
 * @param String $uri
 * @return Array $provider
 */
function dpicontenttypes_dpicontenttypes_provider($uri){
  $provider = NULL;

  if (module_exists('scald_youtube') && scald_youtube_parse_id($uri, FALSE)){
    //Youtube
    $provider = array('name' => 'scald_youtube', 'type' => 'video');
  } elseif (module_exists('scald_vimeo') && scald_vimeo_parse_id($uri, FALSE)){
    //Vimeo
    $provider = array('name' => 'scald_vimeo', 'type' => 'video');
  } elseif (module_exists('scald_dailymotion') &&scald_dailymotion_parse_id($uri, FALSE)){
    //Dailymotion
    $provider = array('name' => 'scald_dailymotion', 'type' => 'video');
  }

  return array('dpicontenttypes' => $provider);
}
