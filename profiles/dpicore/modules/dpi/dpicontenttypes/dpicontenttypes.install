<?php

/**
 * @file
 * Install, update and uninstall functions for the node module.
 */



/**
 * Implements hook_field_schema().
 */
function dpicontenttypes_field_schema($field) {
  return array(
    'columns' => array(
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => '255',
      ),
      'provider' => array(
        'type' => 'varchar',
        'length' => '255',
      ),
      'inline' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );
}

/**
 * Implements hook_schema().
 */
function dpicontenttypes_schema() {
  $schema['dpicontenttypes_properties'] = array(
    'description' => 'The base table for DPI Properties.',
    'fields' => array(
      'dpid' => array(
        'description' => 'The primary identifier for a DPI properties.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
  	  'type' => array(
        'description' => 'The type (bundle) of this DPI properties.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => 'The nid of the node attatch to this properties.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'external_reference' => array(
        'description' => 'The external reference of the node.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'source' => array(
        'description' => 'The source of the node.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'product_id' => array(
        'description' => 'The product ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'nid'                => array('nid'),
      'external_reference' => array('external_reference'),
    ),
    'foreign keys' => array(
      'nid' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
    'primary key' => array('dpid'),
  );

  $schema['dpicontenttypes_properties_type'] = array(
    'description' => 'Stores information about all defined dpiproperties types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique dpiproperties type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ),'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );
  return $schema;
}
/**
 * 
 * Implementation of hook_install
 */
function dpicontenttypes_install(){
  //Create a dpiproperties bundle
  $values = array(
    'type' => 'default',
    'label' => 'default',
    'description' => 'Default DPIPropertiesType',
    'status' => 1,
    'module' => 'dpicontenttypes',
  );
  $dpipropertiestype = new DPIPropertiesTypeEntity($values);
  dpiproperties_type_save($dpipropertiestype);
  
  scald_add_type('link_list', 'Link List', 'Link List');
  
  
}

/**
 * Implements hook_uninstall().
 */
function dpicontenttypes_uninstall() {
  drupal_load('module', 'scald');
  scald_remove_type('link_list');
  drupal_uninstall_schema('dpicontenttypes');
}

/**
 * Creation of the table dpi_properties
 */
function dpicontenttypes_update_7000(){
  //Creation of table dpi_properties
  $schema = drupal_get_schema('dpicontenttypes_properties', TRUE);
  db_create_table('dpicontenttypes_properties', $schema);
  $schema = drupal_get_schema('dpicontenttypes_properties_type', TRUE);
  db_create_table('dpicontenttypes_properties_type', $schema);
  
  $values = array(
    'type' => 'default',
    'label' => 'default',
    'description' => 'Default DPIPropertiesType',
    'status' => 1,
    'module' => 'dpicontenttypes',
  );
  $dpipropertiestype = new DPIPropertiesTypeEntity($values);
  dpiproperties_type_save($dpipropertiestype);
}

/**
* Suppression du champs description de dpiproperties
*/
function dpicontenttypes_update_7001(){
  
  db_drop_field('dpicontenttypes_properties', 'description');
}

