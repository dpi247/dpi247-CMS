<?php

/**
 * @file
 * Install, update and uninstall functions for the node module.
 */

/**
 * Implementation of hook_install
 */
function dpicontenttypes_install() {
  //Create a dpiproperties bundle
  $values = array(
    'type' => 'default',
    'label' => 'default',
    'description' => 'Default DPIPropertiesType',
    'status' => 1,
    'module' => 'dpicontenttypes',
  );
  $dpipropertiestype = new DPIPropertiesTypeEntity($values);
  dpiproperties_type_save($dpipropertiestype);

  scald_add_type('links_list', 'Links List', 'Links List');
}

/**
 * Implements hook_uninstall().
 */
function dpicontenttypes_uninstall() {
  drupal_load('module', 'scald');
  scald_remove_type('links_list');
  drupal_uninstall_schema('dpicontenttypes');
}

/**
 * Implements hook_field_schema().
 */
function dpicontenttypes_field_schema($field) {
  return array(
    'columns' => array(
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => '255',
      ),
      'provider' => array(
        'type' => 'varchar',
        'length' => '255',
      ),
      'inline' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );
}

/**
 * Implements hook_schema().
 */
function dpicontenttypes_schema() {
  $schema['dpicontenttypes_properties'] = array(
    'description' => 'The base table for DPI Properties.',
    'fields' => array(
      'dpid' => array(
        'description' => 'The primary identifier for a DPI properties.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type (bundle) of this DPI properties.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity' => array(
        'description' => 'The entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'id' => array(
        'description' => 'The id of the entity attatch to this properties.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'external_reference' => array(
        'description' => 'The external reference of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'external_reference_2' => array(
        'description' => 'The second external reference of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'source' => array(
        'description' => 'The source of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'product_id' => array(
        'description' => 'The product ID of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'id'                => array('id'),
      'external_reference' => array('external_reference'),
    ),
    'primary key' => array('dpid'),
  );

  $schema['dpicontenttypes_properties_type'] = array(
    'description' => 'Stores information about all defined dpiproperties types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique dpiproperties type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ),
    'status' => array(
      'type' => 'int',
      'not null' => TRUE,
      // Set the default to ENTITY_CUSTOM without using the constant as it is
      // not safe to use it at this point.
      'default' => 0x01,
      'size' => 'tiny',
      'description' => 'The exportable status of the entity.',
    ),
    'module' => array(
      'description' => 'The name of the providing module if the entity has been defined in code.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  //Prenode list
  $schema['dpicontenttypes_prenode'] = array(
    'description' => 'List of the prenodes',
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'description' => 'The ID of the prenode',
      ),
      'updated' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The time this prenode was created or updated',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Title',
      ),
    ),
    'primary key' => array('id'),
  );

  //Prenode object
  $schema['dpicontenttypes_prenode_object_cache'] = array(
    'description' => t('A special cache used to store prenodes that are being edited.'),
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'description' => 'The id of the object this cache is attached to.',
      ),
      'updated' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The time this cache was created or updated.',
      ),
      'data' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized data being stored.',
      ),
    ),
    'primary key' => array('id'),
  );
  
  //Prenode object
  $schema['dpicontenttypes_prenode_html_cache'] = array(
    'description' => t('A special cache used to store prenodes that are being edited.'),
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'description' => 'The id of the object this cache is attached to.',
      ),
      'updated' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The time this cache was created or updated.',
      ),
      'data' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized data being stored.',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['dpicontenttypes_cropings'] = array(
    'description' => 'Contains the cropings informations for the couples entities/atoms',
    'fields' => array(
      'cid' => array(
        'description' => 'The primary identifier for a croping',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'etype' => array(
        'description' => 'Entity type',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'eid' => array(
        'description' => 'The id of the entity attached to this croping',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'aid' => array(
        'description' => 'The id of the atom attached to this croping',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cropings' => array(
        'description' => 'Serialized cropings values',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
      ),
      'temp' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'form_token' => array(
        'description' => 'The token of the form of the entity being created',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'small',
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'entity' => array('etype', 'eid'),
      'croping_entry' => array('etype', 'eid', 'aid'),
    ),
  );

  return $schema;
}

/**
 * Creation of the table dpi_properties
 */
function dpicontenttypes_update_7000() {
  //Creation of table dpi_properties
  $schema = drupal_get_schema('dpicontenttypes_properties', TRUE);
  db_create_table('dpicontenttypes_properties', $schema);
  $schema = drupal_get_schema('dpicontenttypes_properties_type', TRUE);
  db_create_table('dpicontenttypes_properties_type', $schema);

  $values = array(
    'type' => 'default',
    'label' => 'default',
    'description' => 'Default DPIPropertiesType',
    'status' => 1,
    'module' => 'dpicontenttypes',
  );
  $dpipropertiestype = new DPIPropertiesTypeEntity($values);
  dpiproperties_type_save($dpipropertiestype);
}

/**
 * Suppression du champs description de dpiproperties
 */
function dpicontenttypes_update_7001() {
  db_drop_field('dpicontenttypes_properties', 'description');
}

/**
 * Reinstallation de la table dpiproporties
 */
function dpicontenttypes_update_7002() {
  $schema = drupal_get_schema('dpicontenttypes_properties', TRUE);
  db_drop_table('dpicontenttypes_properties');
  db_create_table('dpicontenttypes_properties', $schema);
}

/**
 * Install prenode tables
 */
function dpicontenttypes_update_7003() {
  $schema = drupal_get_schema('dpicontenttypes_prenode', TRUE);
  db_create_table('dpicontenttypes_prenode', $schema);
  $schema = drupal_get_schema('dpicontenttypes_prenode_object_cache', TRUE);
  db_create_table('dpicontenttypes_prenode_object_cache', $schema);
  $schema = drupal_get_schema('dpicontenttypes_prenode_html_cache', TRUE);
  db_create_table('dpicontenttypes_prenode_html_cache', $schema);
}

/**
 * Install the dpicontenttypes_cropings table
 */
function dpicontenttypes_update_7004() {
  $schema = drupal_get_schema('dpicontenttypes_cropings', TRUE);
  db_create_table('dpicontenttypes_cropings', $schema);
}
