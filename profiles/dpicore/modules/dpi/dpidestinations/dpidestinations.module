
<?php

module_load_include('inc', 'dpidestinations','dpidestinations.api');
module_load_include('inc', 'dpidestinations','dpidestinations.private');
module_load_include('inc', 'dpidestinations','dpidestinations.helpers');
module_load_include('inc', 'dpidestinations','dpidestinations.fields');
module_load_include('inc', 'dpidestinations','dpidestinations.entity');


/**
 * Implementation of hook_theme()
*/
function dpidestinations_theme() {

  $theme['dpidestinations_add_content_modal'] = array(
    'variables' => array('renderer' => NULL, 'groups' => array(), 'region' => NULL, 'category' => NULL,'group' => NULL, 'categories'=> array(), 'column_count' => 2),
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'template' => 'dpidestinations-add-content-modal',
  );
  $theme['dpidestinations_page_targetview_reorder_form'] = array(
    'template' => 'dpidestinations-targetview-page-reorder-form',
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'render element' => 'form',
  );

  return $theme;
}
/**
 * Implementation of hook_menu()
 */
function dpidestinations_menu(){
  $items['destination/%destinationterm'] = array(
    'title callback' => 'destination_view',
    'title arguments' => array(1),
    'page callback' => 'dpidestinations_page_destination_view',
    'page arguments' => array(1),
    'access arguments' => array('view targets'),
    'type' => MENU_CALLBACK,
  );
  //secondary parameter should be a target machine_name
  $items['admin/targetview_reorder/%taxonomy_term/%dpidestinations_api_target_machinename'] = array(
    'page callback' => 'dpidestinations_page_targetview_reorder',
    'page arguments' => array(2,3),
    'access arguments' => array('reorder target'),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
    'file' => 'dpidestinations.pages.reorder.inc'
  );

  $items['target/%target'] = array(
    'title callback' => 'target_page_title',
    'title arguments' => array(1),
    'page callback' => 'target_view',
    'page arguments' => array(1),
    'access arguments' => array('view targets'),
    'type' => MENU_CALLBACK,
  );

  $items['target/add'] = array(
    'title' => 'Add Target!',
    'page callback' => 'target_add',
    'access arguments' => array('create target'),
  );

  $items['admin/structure/target'] = array(
    'title' => 'Manage Targets',
    'access arguments' => array('administer targets'),
    'page callback' => 'dpidestinations_page_administration_targets',
    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
    'file' => 'dpidestinations.pages.admin.inc'
  );

  $items['admin/structure/targetblocks'] = array(
    'title' => 'Manage Targetblocks',
    'access arguments' => array('administer targets'),
    'page callback' => 'dpidestinations_page_administration_targetblocks',
    'type' => MENU_DEFAULT_LOCAL_TASK,

    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
    'file' => 'dpidestinations.pages.admin.inc'


  );
  $items['admin/dpi247/dpidestinations'] = array(
    'title' => 'DPIDestinations',
    'access arguments' => array('administer targets'),
    'page callback' => 'dpidestinations_page_administration_targetblocks',
    'file' => 'dpidestinations.pages.admin.inc',
    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',


  );
  $items['admin/dpi247/dpidestinations/destinations'] = array(
    'title' => 'Destinations',
    'description' => 'View existing destinations.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,


  );
  $items['admin/dpi247/dpidestinations/configuration'] = array(
    'title' => 'Configuration',
    'description' => 'Configure dpidestinations.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,

    'page callback' => 'target_add',
    'access arguments' => array('administer dpidestinations'),


  );

  return $items;
}


function dpidestinations_menu_alter(& $items){

  //Cause dpidestinations can be used as standalone module outside the distribution
  if(!isset($items['admin/dpi247'])){

    $items['admin/dpi247'] = array(
      'title' => 'dpi247',
      'description' => 'Administer dpi247 settings.',
      'position' => 'right',
      'weight' => -8,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path'=> drupal_get_path('module', 'system'),
    );
  }

}
/**
 * Implementation of hook_permission()
 */
function dpidestinations_permission(){
  return array(
    'administer targets' =>  array(
      'title' => t('Administer targets'),
      'restrict access' => TRUE,
    ),

    'view targets' => array(
      'title' => t('View targets'),
    ),
    'create targets' => array(
      'title' => t('Create targets'),
    ),
  );
}

/**
 * Implementation of hook_panels_display_save()
 */
function dpidestinations_panels_display_save($display){


  //STEP 1: First delete all targetblock that doesn't exist anymore.
  $targetController = new TargetBlockController('targetblock');
  $existing_targetblocks = $targetController->load_targetblocks_by_panels_display($display->did);

  $targetblock_by_pid = array();
  foreach ($existing_targetblocks as $targetblockid  => $targetblock){
    $targetblock_by_pid[$targetblock->pid] = $targetblock;
  }
  foreach ($display->content as $id => $pane){
    if ($pane->type == 'targetblock'){
      if (!strstr($id, 'new')){
        $panels_in_display_by_pid[$pane->pid] = $pane;
      }
    }
  }

  $targetblocks_to_delete_temp = array_diff_key($targetblock_by_pid, $panels_in_display_by_pid);

  $targetblocks_to_delete = array();
  foreach ($targetblocks_to_delete_temp as $targetblock_to_delete_temp){
    if (isset($existing_targetblocks[$targetblock_to_delete_temp->targetblockid ])){
      $targetblocks_to_delete[$targetblock_to_delete_temp->targetblockid ] = $targetblock_to_delete_temp->targetblockid ;
    }
  }
  if(count($targetblocks_to_delete)){
    targetblock_delete_multiple($targetblocks_to_delete);
  }




  //STEP 2: Create new targetblock
  foreach ($display->content as $id => &$pane){
    if ($pane->type == 'targetblock'){
      if (!strstr($id, 'new')){
        $targetblock = (object)$pane->configuration;
        $targetblock->did = $pane->did;
        $targetblock->pid = $pane->pid;
        $targetblock->target = $pane->subtype;

        if (isset($targetblock_by_pid[$pane->pid])){
          $targetblock->targetblockid = $targetblock_by_pid[$pane->pid]->targetblockid;
        }
        targetblock_save($targetblock);
        unset($targetblock);
      }
    }
  }


}



function dpidestinations_default_panels_renderer_pipeline() {
  $pipelines = array();
  $pipeline = new stdClass;
  $pipeline->disabled = FALSE; /* Edit this to true to make a default pipeline disabled initially */
  $pipeline->api_version = 1;
  $pipeline->name = 'dpidestinations_viewer';
  $pipeline->admin_title = t('Destinations viewer');
  $pipeline->admin_description = t('Destination viewer.');
  $pipeline->weight = 0;
  //This is add to know that this a print pipeline
  $pipeline->settings = array(
    'renderers' => array(
      0 => array(
        'access' => array(),
        'renderer' => 'dpidestinations_viewer',
        'options' => array(),
      ),
    ),
  );
  $pipelines[$pipeline->name] = $pipeline;

  return $pipelines;
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Inform CTools about version information for various plugins implemented by
 * Panels.
 *
 * @param string $owner
 *   The system name of the module owning the API about which information is
 *   being requested.
 * @param string $api
 *   The name of the API about which information is being requested.
 */
function dpidestinations_ctools_plugin_api($owner, $api) {
  if ($owner == 'panels' && $api == 'pipelines') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'dpidestinations') . '/includes',
    );
  }
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function dpidestinations_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'arguments') {
    return 'plugins/ctools/arguments';
  }
  if ($module == 'ctools' && $plugin == 'contexts') {
    return 'plugins/ctools/contexts';
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/ctools/content_types';
  }
  if ($module == 'page_manager' && $plugin == 'tasks') {
    return 'plugins/page_manager/tasks';
  }
  if ($module == 'page_manager' && $plugin == 'task_handlers') {
    return 'plugins/page_manager/task_handlers';
  }
  if ($module == 'panels' && $plugin == 'display_renderers') {
    return 'plugins/panels/display_renderers';
  }
}

function dpidestinations_term_uri($term){
  return array(
    'path' => 'destination/' . $term->tid,
  );
}

function destinationterm_load($destination_id){
  return taxonomy_term_load($destination_id);
}

function dpidestinations_page_destination_view($destination){
  return t('You need to activate the page manager');
}

/**
 * Implementation of hook_views_plugins
 */
function dpidestinations_views_plugins() {
  $path = drupal_get_path('module', 'dpidestinations');
  $views_path = drupal_get_path('module', 'views');
  //require_once "./$path/theme/theme.inc";

  return array(
    'display' => array(
      'targetview' => array(
        'title' => t('Target block'),
        'help' => t('View display used for the default target, use this as a basis for custom destination views and targetss.'),
        'handler' => 'dpidestinations_plugin_display_targetview',
        'path' => drupal_get_path('module', 'dpidestinations') . '/plugins/views',
        'theme path' => drupal_get_path('module', 'views') . '/theme',
        'theme' => 'views_view',
        'use ajax' => FALSE,
        'use pager' => TRUE,
        'use more' => FALSE,
        'accept attachments' => TRUE,
        'help topic' => 'targetview',
        'admin' => t('Target View'),
        //'base' => array('TargetBlock'), // only works with 'TargetBlock' as base.
      ),
    ),
    'row' => array(
      'targetblock_node_row' => array(
        'title' => t('Target block Row'),
        'help' => t('(Displays the node according to the layout of his destination.'),
        'path' =>  drupal_get_path('module', 'dpidestinations') . '/plugins/views',
        'handler' => 'dpidestinations_plugin_row_node_targetview',
        'base' => array('node'), // only works with 'node' as base.
        'uses options' => TRUE,
        'type' => 'normal',
        'help topic' => 'style-node',

      )
    )
    /*
     'style' => array( //declare the style plugin
     'target_style' => array(
     'path' =>  drupal_get_path('module', 'dpidestinations') . '/plugins/views',
     'title' => t('Target Style'),
     'help' => t('Used for WallyEdit previews'),
     'handler' => 'dpidestinations_views_plugin_style_targetblock',
     'theme' => 'dpidestinations_style_targetblock',
     'theme file' => 'theme.inc',
     'theme path' => drupal_get_path('module', 'dpidestinations') . "/theme",
     'uses row plugin' => TRUE,
     'uses fields' => FALSE,
     'uses options' => TRUE,
     'type' => 'normal',
     ),
     ),

     'row' => array( //declare the unformatted row plugin
     'targetblock_row' => array(
     'title' => t('Target block Row'),
     'help' => t('(Displays the node according to the layout of his destination.'),
     'path' =>  drupal_get_path('module', 'dpidestinations') . '/plugins/views',
     'handler' => 'dpidestinations_views_plugin_row_targetblock',
     'theme' => 'dpidestinations_row_targetblock',
     'theme file' => 'theme.inc',
     'theme path' => drupal_get_path('module', 'dpidestinations') . "/theme",
     'uses row plugin' => TRUE,
     'uses options' => TRUE,
     'type' => 'normal',
     )
     )
    */
  );

}



function dpidestinations_views_api() {
  return array('api' => 2
  );
}





function dpidestinations_preprocess_node(& $vars){

  //Remove this suggestion... useless
  unset($vars['theme_hook_suggestions']['node__'.$vars['node']->nid]);

  //Add suggestion regarding view_mode
  $vars['theme_hook_suggestions'][]='node__'.$vars['view_mode'];
  $vars['theme_hook_suggestions'][]='node__'.$vars['node']->type.'__'.$vars['view_mode'];

  // The 'view' attribute of the node is added in views_preprocess_node()


  /*
   * Still Need to provide some overiding patterns
  if (!empty($vars['node']->view) && !empty($vars['node']->view->display_handler->plugin_name) && $vars['node']->view->display_handler->plugin_name=="targetview") {
  dsm(($vars['node']->view));
  $vars['view'] = $vars['node']->view;

  $vars['theme_hook_suggestions'][] = 'node__view__' . $vars['node']->view->name;
  if (!empty($vars['node']->view->current_display)) {
  $vars['theme_hook_suggestions'][] = 'node__view__' . $vars['node']->view->name . '__' . $vars['node']->view->current_display;

  // If a node is being rendered in a view, and the view does not have a path,
  // prevent drupal from accidentally setting the $page variable:
  if ($vars['page'] && $vars['view_mode'] == 'full' && !$vars['view']->display_handler->has_path()) {
  $vars['page'] = FALSE;
  }
  }
  }
  */

}
