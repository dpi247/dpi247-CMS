<?php

module_load_include('inc', 'dpidestinations','dpidestinations.api');
module_load_include('inc', 'dpidestinations','dpidestinations.private');
module_load_include('inc', 'dpidestinations','dpidestinations.helpers');
module_load_include('inc', 'dpidestinations','dpidestinations.fields');
module_load_include('inc', 'dpidestinations','dpidestinations.entity');


/**
 * Implementation of hook_theme()
*/
function dpidestinations_theme() {

  $theme['dpidestinations_add_content_modal'] = array(
    'variables' => array('renderer' => NULL, 'groups' => array(), 'region' => NULL, 'category' => NULL, 'group' => NULL, 'categories'=> array(), 'column_count' => 2),
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'template' => 'dpidestinations-add-content-modal',
  );
  $theme['dpidestinations_page_targetview_reorder_form'] = array(
    'template' => 'dpidestinations-targetview-page-reorder-form',
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'render element' => 'form',
  );
  $theme['dpidestinations_ipe_pane_wrapper'] = array(
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'variables' => array('output' => NULL, 'pane' => NULL, 'display' => NULL, 'renderer' => NULL),
  );
  $theme['dpidestinations_ipe_region_wrapper'] = array(
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'variables' => array('output' => NULL, 'region_id' => NULL, 'display' => NULL, 'controls' => NULL, 'renderer' => NULL),
  );
  $theme['dpidestinations_ipe_add_pane_button'] = array(
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'variables' => array('region_id' => NULL, 'display' => NULL, 'renderer' => NULL),
  );
  $theme['dpidestinations_ipe_placeholder_pane'] = array(
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'variables' => array('region_id' => NULL, 'region_title' => NULL),
  );
  $theme['dpidestinations_ipe_dnd_form_container'] = array(
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'variables' => array('link' => NULL, 'cache_key' => NULL, 'display' => NULL),
  );
  $theme['dpidestinations_ipe_toolbar'] = array(
    'path' => drupal_get_path('module', 'dpidestinations') . '/templates',
    'file' => 'theme.inc',
    'variables' => array('buttons' => NULL),
  );
  return $theme;
}


/**
 * Implementation of hook_footer()
 *
 * Adds the IPE control container.
 *
 * @param unknown_type $main
 */
function dpidestinations_page_alter(&$page) {
  $buttons = &drupal_static('dpidestinations_ipe_toolbar_buttons', array());
  if (empty($buttons)) {
    return;
  }

  $output = theme('dpidestinations_ipe_toolbar', array('buttons' => $buttons));

  $page['page_bottom']['dpidestinations_ipe'] = array(
    '#markup' =>$output,
  );
}

/**
 * Implementation of hook_menu()
 */
function dpidestinations_menu() {
  $items['section/%sectionterm'] = array(
    'title callback' => 'section_view',
    'title arguments' => array(1),
    'page callback' => 'dpidestinations_page_section_view',
    'page arguments' => array(1),
    'access arguments' => array('view section'),
    'type' => MENU_CALLBACK,
  );

  //secondary parameter should be a target machine_name
  $items['admin/targetview_reorder/%taxonomy_term/%dpidestinations_api_target_machinename'] = array(
    'page callback' => 'dpidestinations_page_targetview_reorder',
    'page arguments' => array(2,3),
    'access arguments' => array('reorder target'),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
    'file' => 'dpidestinations.pages.reorder.inc'
  );

  $items['target/%target'] = array(
    'title callback' => 'target_page_title',
    'title arguments' => array(1),
    'page callback' => 'target_view',
    'page arguments' => array(1),
    'access arguments' => array('view targets'),
    'type' => MENU_CALLBACK,
  );

  $target_entity = entity_get_info('target');
  if($target_entity['fieldable']) {
    // We present this menu item only if the target has been altered as fieldable
    // You should rebuild menu twice to get it...
    $items['admin/structure/target'] = array(
      'title' => t('Manage Targets'),
      'access arguments' => array('administer targets'),
      'page callback' => 'dpidestinations_page_administration_targets',
      'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
      'file' => 'dpidestinations.pages.admin.inc'
    );
  }

  $targetblock_entity = entity_get_info('targetblock');
  if($targetblock_entity['fieldable']) {
    // We present this menu item only if the target has been alter as fieldable
    // you should rebuild menu twice to get it...
    $items['admin/structure/targetblock'] = array(
      'title' => t('Manage Targetblocks'),
      'access arguments' => array('administer targetblocks'),
      'page callback' => 'dpidestinations_page_administration_targetblocks',
      'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
      'file' => 'dpidestinations.pages.admin.inc'
    );
  }

  $items['admin/dpi247/dpidestinations'] = array(
    'title' => 'DPIDestinations',
    'access arguments' => array('administer targets'),
    'page callback' => 'dpidestinations_page_administration_destinations',
    'file' => 'dpidestinations.pages.admin.inc',
    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
  );

  $items['admin/dpi247/dpidestinations/destinations'] = array(
    'title' => t('Destinations'),
    'description' => 'View existing destinations.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/dpi247/dpidestinations/configuration'] = array(
    'title' => t('Configuration'),
    'description' => 'Configure dpidestinations.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'access arguments' => array('administer targets'),
    'page callback' => 'dpidestinations_page_administration_configuration',
    'file' => 'dpidestinations.pages.admin.inc',
    'file path' => drupal_get_path('module', 'dpidestinations').'/includes',
  );

  return $items;
}

function dpidestinations_menu_alter(&$items) {
  // dpidestinations can be used as standalone module outside the distribution
  if(!isset($items['admin/dpi247'])) {
    $items['admin/dpi247'] = array(
      'title' => 'dpi247',
      'description' => 'Administer dpi247 settings.',
      'position' => 'right',
      'weight' => -8,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    );
  }
}

/**
 * Implementation of hook_permission()
 */
function dpidestinations_permission(){
  return array(
    'administer targets' =>  array(
      'title' => t('Administer targets'),
      'restrict access' => TRUE,
    ),

    'view targets' => array(
      'title' => t('View targets'),
    ),
    'create targets' => array(
      'title' => t('Create targets'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM-ID_alter
 * Set the default variant type to "Section" for sections pages
 */
function dpidestinations_form_page_manager_handler_add_alter(&$form, $form_state) {
  if (isset($form_state['task_id']) && $form_state['task_id'] == 'sections' &&
      isset($form['handler']['#options']['destination_context'])) {
    $form['handler']['#default_value'] = 'destination_context';
  }
}

/**
 * Implementation of hook_panels_display_save()
 */
function dpidestinations_panels_display_save($display){
  //STEP 1: First delete all targetblock that doesn't exist anymore.
  $targetController = new TargetBlockController('targetblock');
  $existing_targetblocks = $targetController->load_targetblocks_by_panels_display($display->did);

  $targetblock_by_pid = array();
  foreach ($existing_targetblocks as $targetblockid  => $targetblock){
    $targetblock_by_pid[$targetblock->pid] = $targetblock;
  }
  $panels_in_display_by_pid = array();
  foreach ($display->content as $id => $pane){
    if ($pane->type == 'targetblock'){
      if (!strstr($id, 'new')){
        $panels_in_display_by_pid[$pane->pid] = $pane;
      }
    }
  }

  $targetblocks_to_delete_temp = array_diff_key($targetblock_by_pid, $panels_in_display_by_pid);

  $targetblocks_to_delete = array();
  foreach ($targetblocks_to_delete_temp as $targetblock_to_delete_temp){
    if (isset($existing_targetblocks[$targetblock_to_delete_temp->targetblockid ])){
      $targetblocks_to_delete[$targetblock_to_delete_temp->targetblockid ] = $targetblock_to_delete_temp->targetblockid ;
    }
  }
  if(count($targetblocks_to_delete)){
    targetblock_delete_multiple($targetblocks_to_delete);
  }

  //STEP 2: Create new targetblock
  foreach ($display->content as $id => &$pane){
    if ($pane->type == 'targetblock'){
      if (!strstr($id, 'new')){
        $targetblock = (object)$pane->configuration;
        $targetblock->did = $pane->did;
        $targetblock->pid = $pane->pid;
        $targetblock->target = $pane->subtype;

        if (isset($targetblock_by_pid[$pane->pid])){
          $targetblock->targetblockid = $targetblock_by_pid[$pane->pid]->targetblockid;
        }
        targetblock_save($targetblock);
        unset($targetblock);
      }
    }
  }
}

function dpidestinations_default_panels_renderer_pipeline() {
  
  $pipelines = array();
  $pipeline = new stdClass;
  $pipeline->disabled = FALSE; /* Edit this to true to make a default pipeline disabled initially */
  $pipeline->api_version = 1;
  $pipeline->name = 'dpipviewer';
  $pipeline->admin_title = t('Dpi Panels viewer');
  $pipeline->admin_description = t('Panels on steroids with in place editing and a better way to organize ctools content types.');
  $pipeline->weight = -1;
  //This is add to know that this a print pipeline
  $pipeline->settings = array(
    'renderers' => array(
      0 => array(
        'access' => array(
          'plugins' => array(
            0 => array(
              'name' => 'perm',
              'settings' => array(
                'perm' => 'use panels in place editing',
              ),
              'context' => 'logged-in-user',
            ),
          ),
          'logic' => 'and',
        ),
        'renderer' => 'dpiviewer',
        'options' => array(),
      ),
    ),
    
  );
  $pipelines[$pipeline->name] = $pipeline;

  return $pipelines;
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Inform CTools about version information for various plugins implemented by
 * Panels.
 *
 * @param string $owner
 *   The system name of the module owning the API about which information is
 *   being requested.
 * @param string $api
 *   The name of the API about which information is being requested.
 */
function dpidestinations_ctools_plugin_api($owner, $api) {
  if ($owner == 'panels' && $api == 'pipelines') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'dpidestinations') . '/includes',
    );
  }
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function dpidestinations_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'arguments') {
    return 'plugins/ctools/arguments';
  }
  if ($module == 'ctools' && $plugin == 'contexts') {
    return 'plugins/ctools/contexts';
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/ctools/content_types';
  }
  if ($module == 'page_manager' && $plugin == 'tasks') {
    return 'plugins/page_manager/tasks';
  }
  if ($module == 'page_manager' && $plugin == 'task_handlers') {
    return 'plugins/page_manager/task_handlers';
  }
  if ($module == 'panels' && $plugin == 'display_renderers') {
    return 'plugins/panels/display_renderers';
  }
}

function dpidestinations_term_uri($term){
  return array(
    'path' => 'section/' . $term->tid,
  );
}

function sectionterm_load($section_tid){
  return taxonomy_term_load($section_tid);
}

function dpidestinations_page_section_view($destination){
  return t('You need to activate the page manager');
}

/**
 * Implementation of hook_views_plugins
 */
function dpidestinations_views_plugins() {
  $path = drupal_get_path('module', 'dpidestinations');
  $views_path = drupal_get_path('module', 'views');
  //require_once "./$path/theme/theme.inc";

  return array(
    'display' => array(
      'targetview' => array(
        'title' => t('Target block'),
        'help' => t('View display used for the default target, use this as a basis for custom destination views and targetss.'),
        'handler' => 'dpidestinations_plugin_display_targetview',
        'path' => drupal_get_path('module', 'dpidestinations') . '/plugins/views',
        'theme path' => drupal_get_path('module', 'views') . '/theme',
        'theme' => 'views_view',
        'use ajax' => FALSE,
        'use pager' => TRUE,
        'use more' => FALSE,
        'accept attachments' => TRUE,
        'help topic' => 'targetview',
        'admin' => t('Target View'),
        //'base' => array('TargetBlock'), // only works with 'TargetBlock' as base.
      ),
    ),
    'row' => array(
      'targetblock_node_row' => array(
        'title' => t('Target block Row'),
        'help' => t('(Displays the node according to the layout of his destination.'),
        'path' =>  drupal_get_path('module', 'dpidestinations') . '/plugins/views',
        'handler' => 'dpidestinations_plugin_row_node_targetview',
        'base' => array('node'), // only works with 'node' as base.
        'uses options' => TRUE,
        'type' => 'normal',
        'help topic' => 'style-node',
      ),
    ),
    /*
     'style' => array( //declare the style plugin
     'target_style' => array(
     'path' =>  drupal_get_path('module', 'dpidestinations') . '/plugins/views',
     'title' => t('Target Style'),
     'help' => t('Used for WallyEdit previews'),
     'handler' => 'dpidestinations_views_plugin_style_targetblock',
     'theme' => 'dpidestinations_style_targetblock',
     'theme file' => 'theme.inc',
     'theme path' => drupal_get_path('module', 'dpidestinations') . "/theme",
     'uses row plugin' => TRUE,
     'uses fields' => FALSE,
     'uses options' => TRUE,
     'type' => 'normal',
     ),
     ),

     'row' => array( //declare the unformatted row plugin
     'targetblock_row' => array(
     'title' => t('Target block Row'),
     'help' => t('(Displays the node according to the layout of his destination.'),
     'path' =>  drupal_get_path('module', 'dpidestinations') . '/plugins/views',
     'handler' => 'dpidestinations_views_plugin_row_targetblock',
     'theme' => 'dpidestinations_row_targetblock',
     'theme file' => 'theme.inc',
     'theme path' => drupal_get_path('module', 'dpidestinations') . "/theme",
     'uses row plugin' => TRUE,
     'uses options' => TRUE,
     'type' => 'normal',
     )
     )
    */
  );
}

function dpidestinations_views_api() {
  return array('api' => 2
  );
}

/**
 * Implementation of hook_preprocess_views_view_field
 *
 * Adding some theme_hook_suggestion based on destinations view mode.
 */
function dpidestinations_preprocess_views_view_field(&$vars) {
  if (isset($vars['row'])) {
    $row = clone $vars['row']; // We use array_shift so we have to protect the original row
    if (isset($row->_field_data) && is_array($row->_field_data) && !empty($row->_field_data)) {
      // Get entity and entity infos
      $entity_infos = array_shift($row->_field_data);
      $entity = $entity_infos['entity'];
      $entity_type = $entity_infos['entity_type'];
      if ($entity && $entity_type) {
        $view = $vars['view'];
        if ($view_mode = _dpidestinations_get_view_mode_from_views_row($view, $entity, $entity_type)) {
          $field_name = $vars['field']->field;
          $vars['theme_hook_suggestions'][] = 'views_view_field__'.$view_mode;
          $vars['theme_hook_suggestions'][] = 'views_view_field__'.$field_name.'__'.$view_mode;
        }
      }
    }
  }
}

function dpidestinations_preprocess_node(&$vars) {
  //Remove this suggestion... useless
  unset($vars['theme_hook_suggestions']['node__'.$vars['node']->nid]);

  if (isset($vars['elements']['#entity_type'])) {
    $entity_type = $vars['elements']['#entity_type'];
    if (isset($vars[$entity_type])) {
      $entity = $vars[$entity_type];
      if ($entity && $entity_type && isset($vars['view'])) {
        $view = $vars['view'];
        if ($view_mode = _dpidestinations_get_view_mode_from_views_row($view, $entity, $entity_type)) {
          //Add suggestion regarding view_mode
          $vars['theme_hook_suggestions'][] = 'node__'.$view_mode;
          $vars['theme_hook_suggestions'][] = 'node__'.$vars['type'].'__'.$view_mode;
          $vars['view_mode'] = $view_mode;
        }
      }
    }
  }

  // The 'view' attribute of the node is added in views_preprocess_node()


  /*
   * Still Need to provide some overiding patterns
  if (!empty($vars['node']->view) && !empty($vars['node']->view->display_handler->plugin_name) && $vars['node']->view->display_handler->plugin_name=="targetview") {
  dsm(($vars['node']->view));
  $vars['view'] = $vars['node']->view;

  $vars['theme_hook_suggestions'][] = 'node__view__' . $vars['node']->view->name;
  if (!empty($vars['node']->view->current_display)) {
  $vars['theme_hook_suggestions'][] = 'node__view__' . $vars['node']->view->name . '__' . $vars['node']->view->current_display;

  // If a node is being rendered in a view, and the view does not have a path,
  // prevent drupal from accidentally setting the $page variable:
  if ($vars['page'] && $vars['view_mode'] == 'full' && !$vars['view']->display_handler->has_path()) {
  $vars['page'] = FALSE;
  }
  }
  }
  */

}

function dpidestinations_dpicache_cache_entry_register() {
  return array(
    'dpidestinations_targetblock_render' => array(
      'callback' => '_dpidestinations_targetblock_content_type_render_process', // function to call
      'plugin' => 'dpicache_memcache', // which storage?
      'catagory' => 'dpidestinations', // group
      'data_type' => "object", // the callback returns a string
      'ttl' => 7*24*60*60, // (in seconds) keep a cache for one week
      'refresh_interval' => 60*400, // no need to refresh since hook_nodeapi will do it for us
      'file' => array(
        "module" => "dpidestinations",
        "type" => "inc",
        "name" => "plugins/ctools/content_types/targetblock/targetblock",
      ),
      'bypass' => TRUE,
    )
  );
}
