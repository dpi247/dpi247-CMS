<?php
/**
 * @file
 * Install, update and uninstall functions for the minimal installation profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function dpicore_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  $admin_theme = 'seven';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  if (module_exists('dashboard')) {
    $blocks[] = array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    );
    $blocks[] = array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    );
  }
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');
}

/**
 * Implementation of hook_install_tasks
 *
 * @param Array $install_state
 */
function dpicore_install_tasks($install_state) {
  $tasks = array();

  // Set the taxonomy vid into dpi_variable
  $tasks['set_taxonomy_variable'] = array(
    'display_name' => st('Set taxonomy variables'),
    'display' => TRUE,
    'type' => 'normal',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'dpicore_install_set_taxonomy_variables',
  );

  // Install demo contents
  $tasks['install_demo_contents'] = array(
    'display_name' => st('Install demo contents'),
    'display' => TRUE,
    'type' => 'form',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'dpicore_install_demo_contents_form',
  );

  return $tasks;
}

/**
 * Set the taxonomy vid into dpi_variable
 */
function dpicore_install_set_taxonomy_variables() {
  // Set the vid of the vocabulary in dpi_variable_set
  dpicore_install_set_a_taxonomy_variable("authors");
  dpicore_install_set_a_taxonomy_variable("concepts");
  dpicore_install_set_a_taxonomy_variable("entities");
  dpicore_install_set_a_taxonomy_variable("freetags");
  dpicore_install_set_a_taxonomy_variable("iptc");
  dpicore_install_set_a_taxonomy_variable("locations");
  dpicore_install_set_a_taxonomy_variable("packagelayout");
  dpicore_install_set_a_taxonomy_variable("persons");
  dpicore_install_set_a_taxonomy_variable("rating");
}

/**
 * Get the vid of a vocabulary by its name and set it in a dpi_variale
 *
 * @param String $name
 */
function dpicore_install_set_a_taxonomy_variable($name){
  $result = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = :machine_name", array(':machine_name' => $name));
  $vid = NULL;

  foreach ($result as $record) {
    $vid = $record->vid;
  }

  dpi_variable_set('dpi_'.$name, $vid);
}

function dpicore_install_demo_contents_form($form, &$form_state, &$install_state) {
  drupal_set_title(st('Install demo contents'));

  $form['install_demo_contents'] = array(
    '#type' => 'fieldset',
    '#title' => st('Install demo contents'),
    '#collapsible' => FALSE,
  );

  $form['install_demo_contents']['theme_theunfold'] = array(
    '#type' => 'checkbox',
    '#title' => st('Use TheUnfold theme'),
    '#default_value' => 1,
  );

  $form['install_demo_contents']['demo_contents'] = array(
    '#type' => 'checkbox',
    '#title' => st('Add demo contents (formatters, user roles, etc.)'),
    '#default_value' => 0,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Save and continue'),
  );

  return $form;
}

function dpicore_install_demo_contents_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['demo_contents'] && !$values['theme_theunfold']) {
    form_error($form['install_demo_contents']['demo_contents'], t('You have to enable TheUnfold theme to install demo contents!'));
  }
}

function dpicore_install_demo_contents_form_submit($form, $form_state) {
  $values = $form_state['values'];
  if ($values['theme_theunfold']) {
    _dpicore_install_demo_contents_minimal();
    if ($values['demo_contents']) {
      _dpicore_install_demo_contents_full();
    }
  } else {
    _dpicore_install_default_contents();
  }
}

function _dpicore_install_demo_contents_minimal() {
  theme_enable(array('theunfold'));
  theme_disable(array('bartik'));
  variable_set('theme_default', 'theunfold');

  module_enable(array('unfoldcompanionminimal'));
}

function _dpicore_install_demo_contents_full() {
  module_enable(array('unfoldcompanion'));
}

function _dpicore_install_default_contents() {
}
