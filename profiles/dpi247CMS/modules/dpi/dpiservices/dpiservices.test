<?php
/**
 * This class is create to test api function
 * 
 * @author lba
 */
class SimpleTestDpiServicesTestCase extends DrupalWebTestCase{
  
  /**
   * Générate information for simpletest module
   * @return multitype:string
   */
  public static function getInfo(){
    return array(
      'name' => 'Dpiservices api testing',
      'description' => 'Simple test unit for dpiservices api',
      'group' => 'Dpiservices',
    );
  }
  
  /**
   * This function generate all information for function
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    $this->setup = TRUE;
    module_load_include('inc', 'dpiservices', 'dpiservices.api');
  }
  
  function tearDown() { }
  
  /**
   * This function return one node from db
   * @return node
   */
  function generate_node(){
    $query = db_select('node', 'n')
              ->condition('type', 'package', '=')
              ->fields('n', array('nid', 'vid'))
              ->range(0,1)
              ->execute()->fetchAssoc();
    return node_load($query['nid'], $query['vid']);
  }
  
  /**
   * This function test function dpiservices_packages_get_field_element_by_search_value from dpiservices.api
   */
  function test_dpiservices_packages_get_field_element_by_search_value(){
    /**
     *  create a simple test with node element 
     *  First time, we create a test for node load
     */
    $node = $this->generate_node();    
    $load = get_class($node) == "stdClass";
    $this->assertTrue($load, "chargement du noeud réussis (Create a node if this test is unsuccess !)", 'DpiSetUp');
    
    if($load){      
      $test = dpiservices_packages_get_field_element_by_search_value ( 'node', $node, 'field_destinations', 'layout' );
      $this->assertFalse(is_bool($test) , 'Function dpiservices_packages_get_field_element_by_search_value return other than false' , 'Dpiservices.api');
    }
  }
  
  /**
   * This function test dpiservices_packages_get_one_element_from_item_from_node from dpiservices.api
   */
  function test_dpiservices_packages_get_one_element_from_item_from_node(){    
    if(get_class($node = $this->generate_node())== "stdClass"){
      $test = dpiservices_packages_get_one_element_from_item_from_node ( 'node', $node, 'field_authors', 'tid', 'name' );
      $this->assertTrue(is_array($test), 'Function dpiservices_packages_get_one_element_from_item_from_node return an array', 'Dpiservices.api');      
    }
  }
  
  /**
   * This function test dpiservices_packages_generate_crop_informations from dpiservices.api
   */
  function test_dpiservices_packages_generate_crop_informations(){    
    if(get_class($node = $this->generate_node())== "stdClass"){
      $test = dpiservices_packages_generate_crop_informations(rand(0,9),rand(0,9));
      $this->assertTrue(is_array($test), 'Function dpiservices_packages_generate_crop_informations return an array all the time', 'Dpiservices.api');
      
      $test = dpiservices_packages_generate_crop_informations();
      $this->assertTrue(is_array($test), 'Function dpiservices_packages_generate_crop_informations return an array without parameter', 'Dpiservices.api');
      $this->assertTrue(empty($test[0])&&empty($test[1]), 'Function dpiservices_packages_generate_crop_informations return an empty array', 'Dpiservices.api');       
    }
  }
  
  /**
   * This function test dpiservices_product_get_one_product_by_label from dpiservices.api
   */
  function test_dpiservices_product_get_one_product_by_label(){
    if(get_class($node = $this->generate_node())== "stdClass"){
      $test = dpiservices_product_get_one_product_by_label('osef');
      $this->assertFalse(!is_bool($test), 'Function dpiservices_product_get_one_product_by_label return true value', 'Dpiservices.api');
      
      $test = dpiservices_product_get_one_product_by_label();
      $this->assertFalse($test, 'Function dpiservices_product_get_one_product_by_label without argument return false', 'Dpiservices.api');
    }
  }
  
  /**
   * This function test dpiservices_product_get_all_product_info from dpiservices.api
   */
  function test_dpiservices_product_get_all_product_info(){
    if(get_class($node = $this->generate_node())== "stdClass"){
      $test = dpiservices_product_get_all_product_info();
      $this->assertTrue(is_array($test), 'Function dpiservices_product_get_all_product_info return an array without argument', 'Dpiservices.api');
      
      $test = dpiservices_product_get_all_product_info('coucou');
      $this->assertFalse($test, 'Function dpiservices_product_get_all_product_info return false with no numerical argument', 'Dpiservices.api');
      
      $test = dpiservices_product_get_all_product_info(15);
      $this->assertTrue(is_array($test), 'Function dpiservices_product_get_all_product_info return an array with numerical argument', 'Dpiservices.api');
    }
  }
  
}