<?php

module_load_include('inc', 'dpicontenttypes','dpicontenttypes.api');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.fields');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.entity');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.private');
module_load_include('inc', 'dpicontenttypes','dpicontenttypes.effects');
include_once 'dpicontenttypes.features.inc';





/**
 * Implementation of hook_menu()
 */
function dpicontenttypes_menu(){
  $items = array();

  $items['admin/dpi247/external-files'] = array(
    'title' => 'External files management',
    'description' => 'This concerns files fetched from external services, like RSS feeds',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpicontenttypes_form_page_external_files_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/dpicontenttypes.pages.admin.inc',
  );

  $dpiproperties_uri = 'dpiproperties/%dpiproperties';
  $dpiproperties_uri_argument_position = 1;

  $items[$dpiproperties_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('dpiproperties', $dpiproperties_uri_argument_position),
    'page callback' => 'dpiproperties_view',
    'page arguments' => array($dpiproperties_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'dpiproperties', $dpiproperties_uri_argument_position),
    'file' => 'dpicontenttypes.entity.inc',
  );

  $items[$dpiproperties_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$dpiproperties_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpiproperties_form', $dpiproperties_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'dpiproperties', $dpiproperties_uri_argument_position),
    'file' => 'dpicontenttypes.entity.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/dpi247/dpiproperties-types/%dpiproperties_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpiproperties_type_form_delete_confirm', 4),
    'access arguments' => array('administer dpiproperties types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dpicontenttypes.entity.inc',
  );

  $items['node/%node/dpiproperties'] = array(
    'title' => 'DPIProperties',
    'page callback' => 'dpicontenttypes_entity_properties',
    'page arguments' => array('node', 1),
    'access arguments' => array('view dpiproperties'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dpicontenttypes.pages.inc',
    'file path' => drupal_get_path('module', 'dpicontenttypes').'/includes',
    'weight' => 50,
  );

  $items['atom/%scald_atom/dpiproperties'] = array(
    'title' => 'DPIProperties',
    'page callback' => 'dpicontenttypes_entity_properties',
    'page arguments' => array('scald_atom', 1),
    'access arguments' => array('view dpiproperties'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dpicontenttypes.pages.inc',
    'file path' => drupal_get_path('module', 'dpicontenttypes').'/includes',
    'weight' => 50,
  );

  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  $directory_path_count = count(explode('/', $directory_path));
  $items[$directory_path . '/dpistyles/%image_style/%typed_entity/%scald_atom'] = array(
    'title' => t('Generate image style with an entity context'),
    'page callback' => 'dpicontenttypes_image_style_deliver',
    'page arguments' => array($directory_path_count + 1, $directory_path_count + 2, $directory_path_count + 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/dpicontenttypes.pages.inc',
  );

  $items['admin/editdpicrop/%ctools_js/%/%/%'] = array(
    'title' => t('Edit croping'),
    'page callback' => 'dpicontenttypes_ajax_editcrop',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/dpicontenttypes.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_cron
 */
function dpicontenttypes_cron() {
  // Remove old external files
  _dpicontenttypes_cron_remove_external_files();
}

/**
 * Implementation of hook_permission()
 */
function dpicontenttypes_permission(){
  return array(
    'administer dpiproperties' =>  array(
      'title' => t('Administer DPI properties'),
      'restrict access' => TRUE,
    ),
    'view dpiproperties' => array(
      'title' => t('View DPI properties'),
    ),
    'edit dpiproperties' => array(
      'title' => t('Edit DPI properties'),
    ),
    'create dpiproperties' => array(
      'title' => t('Create DPI properties'),
    ),
  );
}

/**
 * Implementation of hook_node_insert
 *
 * @param object $node
 */
function dpicontenttypes_node_insert($node) {
  if (in_array($node->type, dpicontenttypes_api_getdpicontenttypes())) {
    _dpicontenttypes_entityinsertdpiproperties($node, 'node', $node->nid);

    rules_invoke_event('dpicontenttypes_rules_event_package_create_or_edit', $node);
  }
}

/**
 * Implementation of hook_node_create
 *
 * @param object $node
 */
function dpicontenttypes_node_create($node) {
  if (in_array($node->type, dpicontenttypes_api_getdpicontenttypes())) {
    rules_invoke_event('dpicontenttypes_rules_event_package_create', $node);
  }
}

/**
 * Implementation of hook_node_presave
 *
 * @param object $node
 */
function dpicontenttypes_node_presave($node) {
  if (in_array($node->type, dpicontenttypes_api_getdpicontenttypes())) {
    rules_invoke_event('dpicontenttypes_rules_event_package_edited', $node);
  }
}

/**
 * Implementation of hook_node_presave
 *
 * @param object $node
 */
function dpicontenttypes_node_delete($node) {
  _dpicontenttypes_entitydeletedpiproperties($node, 'node', $node->nid);
  
  if (in_array($node->type, dpicontenttypes_api_getdpicontenttypes())) {
    rules_invoke_event('dpicontenttypes_rules_event_package_deleted', $node);
  }
}
    


/**
 * Implementation of hook_theme
 */
function dpicontenttypes_theme() {
  $base = array(
    'path' => drupal_get_path('module', 'dpicontenttypes') . '/templates',
    'file' => 'theme.inc',
  );
  return array(
    'atom_links_lists' => $base + array(
      'variables' => array(
        'content' => NULL,
      ),
      'template' => 'atom-links-list',
    ),
    'dpicontenttypes_image_style' => $base + array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'entity' => array(),
        'atom' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
    'dpicontenttypes_image_render_context' => $base + array(
      'variables' => array(
        'context' => '',
        'atom' => NULL,
        'style_name' => '',
        'options' => array(),
      ),
      'template' => 'dpicontenttypes-image-render-context',
      'type' => 'module',
    ),
    'dpicontenttypes_dpicrop_summary' => array(
      'variables' => array('data' => NULL),
      'path' => drupal_get_path('module', 'dpicontenttypes'),
      'file' => 'dpicontenttypes.effects.inc',
    ),
    'dpicontenttypes_dpicropcopy_summary' => array(
      'variables' => array('data' => NULL),
      'path' => drupal_get_path('module', 'dpicontenttypes'),
      'file' => 'dpicontenttypes.effects.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter
 *
 * Alter the entities edition forms to add an "edit crop" link to atom fields
 */
function dpicontenttypes_form_alter(&$form, &$form_alter, $form_id) {
  if (isset($form['#entity_type']) && isset($form['#bundle']) && isset($form['#entity']) && is_object($form['#entity'])) { // This is an entity edition form
    module_load_include('inc', 'dpicontenttypes', 'includes/dpicontenttypes.cropings');
    _dpicontenttypes_cropings_entity_form_add_cropings_alter($form, $form_alter, $form_id);
  }
}

function dpicontenttypes_form_node_form_alter(&$form, $form_state) {
  if(isset($form["field_displaytitle"])){
    $form["title"]["#type"]='value';
    $form["title"]["#required"]=FALSE;
    $form["title"]["#element_validate"][]='_dpicontenttypes_form_validate_sync_title_with_display_title';
  }
}

/**
 * Implementation of hook_form_FROM-ID_alter
 *
 * Add a validation function to the image effects edition form
 */
function dpicontenttypes_form_image_effect_form_alter(&$form, $form_alter) {
  $form['#validate'][] = 'dpicontenttypes_form_image_effect_form_alter_validate';
}

/**
 * Validate an image effects edition form
 */
function dpicontenttypes_form_image_effect_form_alter_validate($form, $form_state) {
  $effect = $form_state['image_effect'];
  if (function_exists($effect['form callback'].'_validate')) {
    call_user_func($effect['form callback'].'_validate', $form, $form_state, $form_state['values']['data']);
  }
}

/**
 * Implementation of hook_form_FROM-ID_alter
 *
 * Add a devel link for nodes in the admin/content page
 */
function dpicontenttypes_form_node_admin_content_alter(&$form, $form_state) {
  if (module_exists('devel') && user_access('access devel information')) {
    foreach ($form['admin']['nodes']['#options'] as $nid => $options) {
      $form['admin']['nodes']['#options'][$nid]['operations']['data']['#links']['devel'] = array(
        'title' => 'devel',
        'href' => 'node/'.$nid.'/devel',
      );
    }
  }
}

/**
 * Implementation of hook_image_style_flush
 *
 * Flushes cached dpi media for a style.
 *
 * @param $style
 *   An image style array.
 */
function dpicontenttypes_image_style_flush($style) {
  $style_directory = drupal_realpath(file_default_scheme() . '://dpistyles/' . $style['name']);
  if (is_dir($style_directory)) {
    file_unmanaged_delete_recursive($style_directory);
  }
}

/**
 * Implements hook_file_move()
 *
 * Flush the dpistyles images paths
 */
function dpicontenttypes_file_move($file, $source) {
  // Delete any image derivatives at the original image path.
  dpicontenttypes_api_image_path_flush($source->uri);
}

/**
 * Implements hook_file_delete()
 *
 * Flush the dpistyles images paths
 */
function dpicontenttypes_file_delete($file) {
  // Delete any image derivatives of this image.
  dpicontenttypes_api_image_path_flush($file->uri);
}


/**
 * Implements hook_scald_contexts().
 */
function dpicontenttypes_scald_contexts() {
  return array(
    'dpi_inline'        => array(
      'title'           => t('DPI Inline'),
      'description'     => t('When atom is embedded within a textarea.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'dpi_mediabox'      => array(
      'title'           => t('DPI MediaBox'),
      'description'     => t('When atom is embedded within a field.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'dpi_simpleimg'      => array(
      'title'           => t('DPI Simple Image'),
      'description'     => t('To display a simple image tag.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'dpi_targetblock_medium'      => array(
      'title'           => t('DPI TargetBlock Medium'),
      'description'     => t('When atom is displayed in a package with medium layout.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'dpi_targetblock_big'      => array(
      'title'           => t('DPI TargetBlock Big'),
      'description'     => t('When atom is displayed in a package with big layout.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'links_list'      => array(
      'title'           => t('DPI LinkList'),
      'description'     => t('When linklist atom is displayed in a package.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
    'links_list_small'      => array(
      'title'           => t('DPI LinkList small'),
      'description'     => t('When linklist atom is displayed in a context.'),
      'render_language' => 'XHTML',
      'parseable'       => TRUE,
      'formats'         => array(),
    ),
  );
}

/*
 * Implementation of hook_admin_paths_alter
*/
function dpicontenttypes_admin_paths_alter(&$paths) {
  $paths['node/*/edit'] = FALSE;
  $paths['node/add'] = FALSE;
  $paths['node/add/*'] = FALSE;
  $paths['admin/structure/pages/*'] = FALSE;
}

/*
 * Implementation of hook_custom_theme
 * We allow modification of the theme only for GET 
 * otherwise you will have some issue with rules cache regeneration the view mode of the admin theme
 * 
*/
function dpicontenttypes_custom_theme(){
  $menu_item=menu_get_item();
  $path=$menu_item['path'];
  if(strstr($path,'node/add')){
    if(count($_POST)==0)
    return 'shiny';
  }
  if(strstr($path,'node/%/edit')){
    if(count($_POST)==0)
      return 'shiny';
  }
  if(strstr($path,'admin/structure/pages')){
    return 'shiny';
  }
}

/**
 * Implementation of hook_scald_transcoders_alter
 *
 * Add the style name in the scald_image transcoders attributes
 */
function dpicontenttypes_scald_transcoders_alter(&$transcoders) {
  foreach ($transcoders as $name => $transcoder) {
    if ($transcoder['provider'] == 'scald_image' && strstr($name, 'style-')) {
      $transcoders[$name]['style'] = str_replace('style-', '', $name);
    }
  }
}

/**
 * Implements hook_scald_atom_providers
 *
 * Tell Scald that we'll be providing some twitter atoms.
 */
function dpicontenttypes_scald_atom_providers() {
  return array(
    'links_list' => 'Links lists'
  );
}

function dpicontenttypes_scald_add_form(&$form, &$form_state) {
  return array();
}

function dpicontenttypes_scald_add_form_fill(&$atom, $form, $form_state) {
}

/**
 * Implements hook_scald_prerender
 */
function dpicontenttypes_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      // we are not in the library display view, so we need more than the title and thumbnail

      // Tell scald core what he should display
      $view_mode = "full";

      $temporary_content = scald_atom_view($atom, $context);
      
      $atom->rendered->player = theme('atom_links_lists', array('content' => $temporary_content));
      
      //Don't show title, not needed
      $atom->rendered->title = '';
    }
  }
}

/**
 * Implements hook_scald_render
 *
 * This should be used only for dpi inline, dpi mediabox and dpi simpleimg scald's context
 */
function dpicontenttypes_scald_render($atom, $context, $options) {
  switch ($context) {
    case 'debug':
      $output = '<pre class="debug">' . print_r($atom, TRUE) . '</pre>';
      break;

    case 'no-access':
      $output = theme('scald_render_error', array('context' => $context, 'message' => t('You do not have access to view this Atom.')));
      break;

    case 'invalid-id':
      $output = theme('scald_render_error', array('context' => $context, 'message' => t('Invalid Scald ID.')));
      break;

    case 'deleted':
      $output = theme('scald_render_error', array('context' => $context, 'message' => t('Atom deleted!')));
      break;

    default:
      // If this is a custom context created through the UI, we use a special
      // render.
      $dpi_contexts = dpicontenttypes_scald_contexts();
      if(array_key_exists($context, $dpi_contexts)) {
        if (isset($options['entity'])) {
          // Replace the image style rendered image with our own
          $transcoders = scald_transcoders();
          $contexts = scald_contexts();
          $context_config = $contexts[$context];
          if (isset($context_config['type_format'][$atom->type]['transcoder']) && isset($transcoders[$context_config['type_format'][$atom->type]['transcoder']])) {
            $transcoder = $transcoders[$context_config['type_format'][$atom->type]['transcoder']];

            if ($transcoder['provider'] == 'scald_image') {
              $atom->rendered->player = theme('dpicontenttypes_image_render_context', array(
                'context' => $context,
                'atom' => $atom,
                'style_name' => $transcoder['style'],
                'options' => $options,
              ));
            }
          }
        }
        
        $content = scald_atom_view($atom, $context);
        
        // We only use the render of the atom
        // no need of the field_links_list field rendering
        if ($atom->type == 'links_list') {
          unset($content['field_displaytitle']);
          unset($content['field_linkitems']);
        }
        $output = drupal_render($content);
      }
      // Else, returns the title as we don't know what to render.
      else {
        $output = $atom->rendered->title;
      }
      break;
  }

  return $output;
}

/**
 * Implementation of hook_scald_atom_insert
 *
 * Create a dpi properties linked to the new atom
 *
 * @param Object $atom
 */
function dpicontenttypes_scald_atom_insert($atom) {
  _dpicontenttypes_entityinsertdpiproperties($atom, 'scald_atom', $atom->sid);
}

/**
 * Implementation of hook_scald_atom_delete
 *
 * Delete the dpiproperties linked to the atom
 *
 * @param Object $atom
 */
function dpicontenttypes_scald_atom_delete($atom) {
  _dpicontenttypes_entitydeletedpiproperties($atom, 'scald_atom', $atom->sid);
}

/**
 * Implementation of hook_field_attach_view_alter
 *
 * Add package nid to scald tag to get it as an option
 */
function dpicontenttypes_field_attach_view_alter(&$output, $context) {
  list($id, $revision_id, $bundle) = entity_extract_ids($context['entity_type'], $context['entity']);
  if ($bundle == 'package') {
    $fields = field_info_instances($context['entity_type'], $bundle);
    foreach ($fields as $name => $field) {
      if (!empty($field['settings']['dnd_enabled']) && isset($output[$name])) {
        foreach (element_children($output[$name]) as $key) {
          $matches = array();
          preg_match_all(SCALD_SAS_MATCH_PATTERN, $output[$name][$key]['#markup'], $matches);
          foreach ($matches[0] as $match_id => $old_tag) {
            $options = array('entity' => array('type' => $context['entity_type'], 'bundle' => $bundle, 'id' => $id, 'vid' => $revision_id));
            // @todo: insérer nos options dans les options existantes si il y en a
            $new_tag = str_replace(']', ' '.json_encode($options).']', $old_tag);
            $output[$name][$key]['#markup'] = str_replace($old_tag, $new_tag, $output[$name][$key]['#markup']);
          }
        }
      }
    }
  }
}

/**
 * Implement hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function package_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dpicontenttypes_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' && $plugin == "behavior") {
    return 'plugins/entityreference/' . $plugin;
  }
  if ($module == 'dpimport' && $plugin == 'importer') {
    return 'plugins/dpimport/' . $plugin;
  }
}

/**
 * Implements hook_library().
 */
function dpicontenttypes_library() {
  $path = drupal_get_path('module', 'dpicontenttypes');
  $libraries['library'] = array(
    'title' => 'Atom reference library',
    'website' => 'http://drupal.org/project/scald',
    'version' => '1.x',
    'js' => array(
      $path . '/js/dpiatom_reference.js' => array(),
    ),
    'css' => array(
      $path . '/css/dpiatom_reference.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implementation of the hook_dpicontenttypes_provider
 *
 * @param String $uri
 *
 * @return Array $provider
 */
function dpicontenttypes_dpicontenttypes_provider($uri){
  $provider = NULL;

  if (module_exists('scald_youtube') && scald_youtube_parse_id($uri, FALSE)){
    //Youtube
    $provider = array('name' => 'scald_youtube', 'type' => 'video');
  } elseif (module_exists('scald_vimeo') && scald_vimeo_parse_id($uri, FALSE)){
    //Vimeo
    $provider = array('name' => 'scald_vimeo', 'type' => 'video');
  } elseif (module_exists('scald_dailymotion') &&scald_dailymotion_parse_id($uri, FALSE)){
    //Dailymotion
    $provider = array('name' => 'scald_dailymotion', 'type' => 'video');
  }

  return array('dpicontenttypes' => $provider);
}

/**
 * Load function for a typed id, like "node_123" or "user_17" for example
 */
function typed_entity_load($typed_id) {
  list($entity_type, $entity_id) = explode('_', $typed_id);
  if (is_string($entity_type) && is_numeric($entity_id)) {
    $entities = entity_load($entity_type, array($entity_id));
    if (isset($entities[$entity_id])) {
      $entity = $entities[$entity_id];
      $entity->entity_type = $entity_type;
      $entity->entity_id = $typed_id;
      return $entity;
    }
  } elseif ($entity_type == 'node' && $entity_id) {
    // This must be a prenode
    $prenode = new Prenode($entity_id);
    $entity = $prenode->getNode();
    return $entity;
  }
  return NULL;
}


