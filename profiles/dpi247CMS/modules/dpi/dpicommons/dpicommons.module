<?php 

module_load_include('inc', 'dpilog', 'dpilog.private');

/**
 * Implementation of hook_menu
*/
function dpicommons_menu() {
  $items = array();

  $items['admin/config/dpi247'] = array(
    'title' => 'DPI247',
    'description' => 'Parent item for DPI247',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/dpi247/settings'] = array(
    'title' => 'DPI247 Settings',
    'description' => 'General settings for DPI247',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpicommons_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dpicommons.pages.admin.inc',
    'file path' => drupal_get_path('module', 'dpicommons').'/includes',
  );

  // Menu items that are basically just menu blocks.
  $items['admin/dpi247'] = array(
    'title' => 'dpi247',
    'description' => 'Administer dpi247 settings.',
    'position' => 'right',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path'=> drupal_get_path('module', 'system'),
  );

  return $items;
}

function dpicommons_theme(){
  return array(
    'dpi_vertical_tabs' => array(
      'variables' => array('data' => null),
      'file'=>'templates/theme.inc',
    )
  );
}

/**
 * Implementation of hook_init()
 */
function dpicommons_init() {
  if(variable_get('dpicommons_activated_error_handler', FALSE)) {
    module_load_include('inc', 'dpicommons', 'includes/dpicommons.error_handler');
    set_error_handler('_dpicommons_error_handler');
  }

  if(variable_get('dpicommons_activated_shutdown_function', FALSE)) {
    module_load_include('inc', 'dpicommons', 'includes/dpicommons.error_handler');
    register_shutdown_function('_dpicommons_shutdown_function');
  }
}

/**
 * dpilog is used to log some actions (user interactions and system actions).
 * 
 * dpilog is more powerfull than watchdog since you have more granularit to groups log and have the ability to save some variable and one id.
 * dpilog is also a wrapper for the watchdog fonction.
 * No need to use both cause dpilog can trigger a watchdog based on settings in the dpilog settings page.
 * 
 * @param string $log_name
 *   A string used to to identify the log category (see the related hook_dpilog_register).
 * @param string $action
 *   A string used to to identify the log action (see the related hook_dpilog_register).
 * @param string $message
 *   A text describing the log
 * @param array $variables
 *   Use the variable if you need to log some usefull variables.
 *   variables will be serialized in DB
 * @param string/int $id
 *   The id is related to the log that you are. If you log something about a node it will probably be the nid...
 *   It can be usefull for grouping  logs from different type (different module) but  that affect a same object a node for example.
 *   You could see each log for a specific nid across dpilog from several modules
 * @param int $uid
 *   The id of the user that trigger the log. by default the gloabal $user is used.
 *   is FALSE.
 * @param boolean $keep_backtrace
 *   If TRUE it will keep the backtrace as a vardump
 *
 * @see hook_dpilog_register() 
 * @see _dpilog() 
 * 
 */
function dpi_log($log_name, $action, $message, $variables = array(), $id = NULL, $severity = WATCHDOG_NOTICE, $uid = NULL, $keep_backtrace = FALSE){
  if (module_exists('dpilog')) {
    _dpilog_log($log_name, $action, $message, $variables,$id, $severity, $uid, $keep_backtrace);
  }
}

/**
 * Use an entity wrapper to get a field value from an entity
 */
function dpicommons_get_field_from_entity($entity, $entity_type, $field_name, $info = array(), $options = array()) {
  if ($entity_wrapper = entity_metadata_wrapper($entity_type, $entity, $info)) {
    if (isset($entity_wrapper->{$field_name})) {
      $value = $entity_wrapper->{$field_name}->value($options);
      return $value;
    }
  }

  return FALSE;
}

/**
 * Check if an URL is valid and return a 200
 * Return TRUE if so False if not.
 *
 * @param String $url
 *
 * @return Boolean $response
 */
function dpicommons_checkurlresponse($url) {
  $response = TRUE;
  if (!valid_url($url)) {
    $response = FALSE;
  } else {
    // @todo : ajouter la possibilité de limiter les retries sur la requête http
    $request = drupal_http_request($url, array('timeout' => dpi_variable_get('dpicommons_http_request_timeout', 3)));
    if (is_object($request) &&
        ((isset($request->code) && $request->code == 200) || (isset($request->redirect_code) && $request->redirect_code == 200)) &&
        isset($request->data) && !empty($request->data)) {
      // Request OK
    } else {
      $response = FALSE;
    }
  }
  return $response;
}

/**
 * Get numeric keys of a structured array tree element.
 *
 * @param Array $element
 *   The array to process
 *
 * @return Array
 *   An array containing the numeric keys of the given array
 */
function dpicommons_element_children_numeric($element) {
  return array_filter(array_keys((array) $element), 'dpicommons_element_child_numeric');
}

/**
 * Check if the key is a numeric child.
 */
function dpicommons_element_child_numeric($key) {
  return is_numeric($key);
}
