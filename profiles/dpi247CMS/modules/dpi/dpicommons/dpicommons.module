<?php 

module_load_include('inc', 'dpilog', 'dpilog.private');

define('DPI_ADMIN_PATH', 'admin/dpi247');

/**
 * Implementation of hook_menu
*/
function dpicommons_menu() {
  $items = array();

  // Menu items that are basically menu blocks.
  $items[DPI_ADMIN_PATH] = array(
    'title' => 'DPI247',
    'description' => 'Administer DPI247 settings.',
    'position' => 'right',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path'=> drupal_get_path('module', 'system'),
  );

  $items[DPI_ADMIN_PATH.'/general-settings'] = array(
    'title' => 'DPI247 Settings',
    'description' => 'General settings for DPI247',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpicommons_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dpicommons.pages.admin.inc',
    'file path' => drupal_get_path('module', 'dpicommons').'/includes',
    'weight' => -1,
  );

  return $items;
}

/**
 * Implementation of hook_theme()
 */
function dpicommons_theme() {
  $chart_base = array(
    'file' => 'theme.charts.inc',
    'path' => drupal_get_path('module', 'dpicommons').'/templates',
  );

  return array(
    'dpi_vertical_tabs' => array(
      'variables' => array('data' => null),
      'file' => 'templates/theme.inc',
    ),
    'dpicommons_line_chart'	=> $chart_base + array(
      'variables' => array(
        'data' => NULL,
        'title' => NULL,
        'pointSize' => NULL,
        'AxeXTitle' => NULL,
        'width' => NULL,
        'height' => NULL,
        'jsprint' => FALSE,
      ),
    ),
    'dpicommons_pie_chart' => $chart_base + array(
      'variables' => array(
        'data' => NULL,
        'title' => NULL,
        'header_name' => NULL,
        'header_unit' => NULL,
        'width' => NULL,
        'height' => NULL,
        'jsprint' => FALSE,
      ),
    ),
    'dpicommons_gauge_chart' => $chart_base + array(
      'variables' => array(
        'data' => NULL,
        'title' => NULL,
        'hAxis' => NULL,
        'vAxis' => NULL,
        'width' => NULL,
        'height' => NULL,
        'jsprint' => FALSE,
      ),
    ),
    'dpicommons_bar_chart' => $chart_base + array(
      'variables' => array(
        'data' => NULL,
        'title' => NULL,
        'hAxis' => NULL,
        'vAxis' => NULL,
        'width' => NULL,
        'height' => NULL,
        'jsprint' => FALSE,
      ),
    ),
  );
}

/**
 * Implementation of hook_init()
 */
function dpicommons_init() {
  if(variable_get('dpicommons_activated_error_handler', FALSE)) {
    module_load_include('inc', 'dpicommons', 'includes/dpicommons.error_handler');
    set_error_handler('_dpicommons_error_handler');
  }

  if(variable_get('dpicommons_activated_shutdown_function', FALSE)) {
    module_load_include('inc', 'dpicommons', 'includes/dpicommons.error_handler');
    register_shutdown_function('_dpicommons_shutdown_function');
  }
}

/**
 * Implementation of hook_form_FORM-ID_alter
 *
 * Add debug checkboxes to devel settings form
 */
function dpicommons_form_devel_admin_settings_alter(&$form, $form_alter) {
  $form['dpicommons_activated_error_handler'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Wally error handler'),
    '#default_value' => variable_get('dpicommons_activated_error_handler', FALSE),
  );

  $form['dpicommons_activated_shutdown_function'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display error on shutdown'),
    '#description' => t('Register a shutdown function to display the last PHP error.<br>
        <strong>Do not forget to disable this feature when debug is done.</strong>'),
    '#default_value' => variable_get('dpicommons_activated_shutdown_function', FALSE),
  );
}

/**
 * dpilog is used to log some actions (user interactions and system actions).
 *
 * dpilog is more powerfull than watchdog since you have more granularit to groups log and have the ability to save some variable and one id.
 * dpilog is also a wrapper for the watchdog fonction.
 * No need to use both cause dpilog can trigger a watchdog based on settings in the dpilog settings page.
 *
 * @param string $log_name
 *   A string used to to identify the log category (see the related hook_dpilog_register).
 * @param string $action
 *   A string used to to identify the log action (see the related hook_dpilog_register).
 * @param string $message
 *   A text describing the log
 * @param array $variables
 *   Use the variable if you need to log some usefull variables.
 *   variables will be serialized in DB
 * @param string/int $id
 *   The id is related to the log that you are. If you log something about a node it will probably be the nid...
 *   It can be usefull for grouping  logs from different type (different module) but  that affect a same object a node for example.
 *   You could see each log for a specific nid across dpilog from several modules
 * @param int $uid
 *   The id of the user that trigger the log. by default the gloabal $user is used.
 *   is FALSE.
 * @param boolean $keep_backtrace
 *   If TRUE it will keep the backtrace as a vardump
 *
 * @see hook_dpilog_register()
 * @see _dpilog()
 *
 */
function dpi_log($log_name, $action, $message, $variables = array(), $id = NULL, $severity = WATCHDOG_NOTICE, $uid = NULL, $keep_backtrace = FALSE){
  if (module_exists('dpilog')) {
    _dpilog_log($log_name, $action, $message, $variables,$id, $severity, $uid, $keep_backtrace);
  }
}

/**
 * Use an entity wrapper to get a field value from an entity
 */
function dpicommons_get_field_from_entity($entity, $entity_type, $field_name, $info = array(), $options = array()) {
  if ($entity_wrapper = entity_metadata_wrapper($entity_type, $entity, $info)) {
    if (isset($entity_wrapper->{$field_name})) {
      $value = $entity_wrapper->{$field_name}->value($options);
      return $value;
    }
  }

  return FALSE;
}

/**
 * Check if an URL is valid and return a 200
 * Return TRUE if so False if not.
 *
 * @param String $url
 *
 * @return Boolean $response
 */
function dpicommons_checkurlresponse($url) {
  $response = TRUE;
  if (!valid_url($url)) {
    $response = FALSE;
  } else {
    // @todo : ajouter la possibilité de limiter les retries sur la requête http
    $request = drupal_http_request($url, array('timeout' => dpi_variable_get('dpicommons_http_request_timeout', 3)));
    if (is_object($request) &&
        ((isset($request->code) && $request->code == 200) || (isset($request->redirect_code) && $request->redirect_code == 200)) &&
        isset($request->data) && !empty($request->data)) {
      // Request OK
    } else {
      $response = FALSE;
    }
  }
  return $response;
}

/**
 * Get numeric keys of a structured array tree element.
 *
 * @param Array $element
 *   The array to process
 *
 * @return Array
 *   An array containing the numeric keys of the given array
 */
function dpicommons_element_children_numeric($element) {
  return array_filter(array_keys((array) $element), 'dpicommons_element_child_numeric');
}

/**
 * Check if the key is a numeric child.
 */
function dpicommons_element_child_numeric($key) {
  return is_numeric($key);
}

/**
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function dpicommons_rules_event_info_alter(&$events){
  //We chose to remove the dpiproperties event related
  foreach($events as $name=>& $event){

    if(strpos( $name,'dpiproperties')===0){
      $event['group']='z dpi247 advanced';
    }
  }
}

function dpicommons_ctools_plugin_directory($module, $plugin) {
  if ($module == 'panels' && $plugin=='layouts') {
    return 'plugins/' . $plugin;
  }
}




function dpicommons_api_get_all_path_alias_for_node($node){
  return array(
    'node/'.$node->nid,
    drupal_get_path_alias('node/'.$node->nid)
  );
}
