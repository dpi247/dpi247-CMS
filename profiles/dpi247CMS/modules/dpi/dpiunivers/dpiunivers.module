<?php
module_load_include ( 'php', 'dpiunivers', 'dpiunivers.api' );

/**
 * Implementation of hook_menu
 *
 * @return multitype:array
 */
function dpiunivers_menu() {
  $items = array();
  
  $items ['admin/config/dpiunivers'] = array (
    'title' => 'Create customs dpiunivers',
    'description' => 'Allow admin to create specific dpiunivers.',
    'position' => 'right',
    'weight' => - 5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array (
      'administer dpiunivers' 
    ),
    'file' => 'system.admin.inc',
    'file_path' => drupal_get_path ( 'module', 'system' ) 
  );
  
  $items ['admin/config/dpiunivers/settings'] = array (
    'title' => 'Customs universes settings',
    'description' => 'Modify univers\' propreties.',
    'page callback' => 'dpiunivers_view_page',
    'access callback' => TRUE,
    'access arguments' => array (
      'administer dpiunivers' 
    ),
    'file' => 'dpiunivers.pages.view.inc',
    'file path' => drupal_get_path ( 'module', 'dpiunivers' ) . '/includes' 
  );
  
  
  $items ['admin/config/dpiunivers/settings/add'] = array (
    'title' => 'Add customs univers settings',
    'description' => 'Add univers\' propreties.',
    'page callback' => 'dpiunivers_add_or_edit',
    'access arguments' => array (
      'administer dpiunivers' 
    ),
    'file' => 'dpiunivers.pages.add_or_edit.inc',
    'file path' => drupal_get_path ( 'module', 'dpiunivers' ) . '/includes' 
  );
  
  $items ['admin/config/dpiunivers/settings/edit/%'] = array (
    'title' => 'Add customs universes settings',
    'description' => 'Add univers\'s propreties.',
    'page callback' => 'dpiunivers_add_or_edit',
    'page arguments' => array (
      5 
    ),
    'access arguments' => array (
      'administer dpiunivers' 
    ),
    'file' => 'dpiunivers.pages.add_or_edit.inc',
    'file path' => drupal_get_path ( 'module', 'dpiunivers' ) . '/includes' 
  );
  
  $items ['admin/config/dpiunivers/settings/delete/%'] = array (
    'title' => 'Delete univers',
    'description' => 'Add state\'s propreties.',
    'page callback' => 'dpiunivers_delete',
    'page arguments' => array (
      5 
    ),
    'access arguments' => array (
      'administer dpistate' 
    ),
    'file' => 'dpiunivers.pages.delete.inc',
    'file path' => drupal_get_path ( 'module', 'dpiunivers' ) . '/includes' 
  );
  
  return $items;
}

/**
 * Implementation of hook_permission
 *
 * @return multitype:array
 */
function dpiunivers_permission() {
  return array (
    'administer dpiuniver' => array (
      'title' => t ( 'Administer dpiuniver' ),
      'description' => t ( 'Perform administration tasks for dpiuniver module.' ) 
    ) 
  );
}

function dpiunivers_dpistate_get_options(){
  return array(
     'univers' => t('Univers')
  );
}

function dpiunivers_dpistate_get_form_element($type, $state){
  switch($type){
    case 'univers':
        return array(
          '#markup' => t('Element is defined into the settings element'),
        );
      break;
  }
}

function dpiunivers_dpistate_get_value_table_view($type, $values){
  switch ($type) {
    case 'univers':
        return t('Univers avec le theme "@theme" et le menu associÃ© "@menu"', array(
          '@theme' => (isset($values['dpiunivers_theme'])? $values['dpiunivers_theme'] : "undefined"),
          '@menu' => (isset($values['dpiunivers_menu'])? $values['dpiunivers_menu'] : "undefined"),
        ));
      break;    
  }
}

function dpiunivers_dpistate_define_options_settings($row, $values){   
  switch($row["type"]){
    case 'univers' :           
        $return_form_part = array();
        $themes = list_themes();
        $lthemes = array();
        foreach ($themes as $theme) {
          $lthemes[$theme->name] = $theme->name;  
        }
        $return_form_part['dpiunivers_theme'] = array (
          '#type' => 'select',
          '#title' => t ( 'Select the associated theme' ),
          '#options' => $lthemes,
          '#default_value' => (isset ( $values ['dpiunivers_theme'] )) ? $values ['dpiunivers_theme'] : false,
        );
        $menus = menu_get_menus();
        $return_form_part['dpiunivers_menu'] = array (
          '#type' => 'select',
          '#title' => t ( 'Select the associated menu' ),
          '#options' => $menus,
          '#default_value' => (isset ( $values ['dpiunivers_menu'] )) ? $values ['dpiunivers_menu'] : false,
        );
        return array($return_form_part);  
      break;
  }     
}

function dpiunivers_dpistate_define_info_to_save($type, $values){
  switch($type){
    case 'univers' :                
        return array($values);
      break;
  }
}

function dpiunivers_custom_theme(){
//  $menu_item=menu_get_item();  
//  $path=$menu_item['path'];
//  $univers = dpiunivers_api_get_univers();
//  //dsm($menu_item, 'menu');
//  //dsm($univers, 'univers');
//  if(is_array($univers)){
//    foreach($univers as $univer){
//      $sql = "
//      SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.delivery_callback, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*
//      FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path
//      WHERE ml.menu_name = :menu
//      ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC";
//      $result = db_query($sql, array(':menu' => $product_element['product_type']), array('fetch' => PDO::FETCH_ASSOC));
//      $links = array();
//
//      foreach ($result as $item) {
//        $links[] = $item;
//      }
//
//      $tree = menu_tree_data($links);
//    }
//    
//  }
  
}