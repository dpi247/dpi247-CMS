<?php

/**
 * This test class is for api
 * @author lba@audaxis.com
 */
class SimpleTestDpiStateApiToolsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array (
      'name' => 'Api unit test',
      'description' => 'Unit test for state.api',
      'group' => 'Dpistate' 
    );
  }

  function setUp() {
    $this->setup = TRUE;
  }

  function tearDown() {
  }

  function testDpistateApiDbCrudFunction() {
    $transaction = db_transaction ();
    try {
      $id = dpistate_api_add_state ( 'info_dpistate', 0, '20' );
      $this->assertTrue ( $id != FALSE, 'Insertion success', 'DpiState' );
      $value = dpistate_api_get_one_state ( $id );
      $this->assertTrue ( $value != FALSE && ! empty ( $value ), "récupération d'un élément par la fonction dpistate_api_get_one_state", 'Dpistate' );
      $value = dpistate_api_get_all_states ();
      $this->assertTrue ( $value != FALSE && ! empty ( $value ), "récupération d'un élément par la fonction dpistate_api_get_all_states", 'Dpistate' );
      dpistate_api_update_state_by_id ( 'info_dpistate', 0, '10', $id );
      $val = dpistate_api_get_one_state ( $id );
      $this->assertTrue ( $val ['value'] == 10, 'Mise à jour fonctionnel dpistate_api_update_state_by_id', 'Dpistate' );
      $this->assertTrue ( dpistate_api_delete_state_by_id ( $id ), 'Delete success dpistate_api_delete_state_by_id', 'Dpistate' );
    } catch ( Exception $e ) {
      $transaction->rollback ();
      $this->assertTrue ( FALSE, 'Problem occured during transaction', 'Dpistate' );
    }
  }
}

/**
 * This function is use to test return about plugins access function
 * Date not tested because you need records context date to have a good element
 *
 * @author lba
 */
class SimpleTestDpiStateAccessToolsTestCase extends DrupalWebTestCase {

  public $old_value;

  public static function getInfo() {
    return array (
      'name' => 'Access plugins testing',
      'description' => 'Test reaction about access function',
      'group' => 'Dpistate' 
    );
  }

  function setUp() {
    module_load_include ( 'inc', 'dpistate', 'plugins/access/dpistate_status' );
    module_load_include ( 'inc', 'dpicache', 'dpicache.api' );
    $this->setup = TRUE;
  }

  function tearDown() {
  }

  function get_conf_array($act_1, $option_1, $oper_1, $act_2, $oper_2, $act_3, $option_3, $oper_3) {
    return $value = array (
      'row_2' => array (
        'activate_2_0' => $act_1,
        'options_2_0' => $option_1,
        'operation_2_0' => $oper_1 
      ),
      'row_3' => array (
        'activate_3_2' => $act_2,
        'operation_3_2' => $oper_2 
      ),
      'row_5' => array (
        'activate_5_1' => $act_3,
        'options_5_1' => $option_3,
        'operation_5_1' => $oper_3 
      ) 
    );
  }

  function get_default_value($val_2, $val_5, $index_5) {
    return array (
      2 => array (
        'actif' => 0,
        'value' => $val_2 
      ),
      3 => array (
        'actif' => 0,
        'value' => 'Valeur Date' 
      ),
      5 => array (
        'actif' => 0,
        'value' => $val_5,
        'index' => $index_5 
      ) 
    );
  }

  function get_date_before_to_test($number) {
    $str_date;
    if (date ( 'd' ) == 1) {
      $str_date = date ( "Y" ) . '-' . (date ( "m" ) - $number) . '-31 ' . date ( 'H:i' );
    } else {
      $str_date = date ( "Y-m" ) . '-' . (date ( 'd' ) - $number) . ' ' . date ( 'H:i' );
    }
    return $str_date;
  }

  function get_date_after_to_test($number) {
    $str_date;
    if (date ( 'd' ) == 28) {
      $str_date = date ( "Y" ) . '-' . (date ( "m" ) + $number) . '-1 ' . date ( 'H:i' );
    } else {
      $str_date = date ( "Y-m" ) . '-' . (date ( 'd' ) + $number) . ' ' . date ( 'H:i' );
    }
    return $str_date;
  }

  function get_conf_date($id, $operation) {
    return array (
      'row_' . $id => array (
        'activate_' . $id . '_2' => 1,
        'operation_' . $id . '_2' => $operation 
      ) 
    );
  }

  function testDpistateAccessNumericLowerThanFunction() {
    $gen_val = $this->get_default_value ( 3, 'Pâques', 1 );
    // $this->set_new_default_value ( $gen_val, TRUE );
    $this->old_value = variable_get ( 'dpistate_value_at_moment', NULL );
    variable_set ( 'dpistate_value_at_moment', $gen_val );
    
    $conf = $this->get_conf_array ( 1, 4, '<', 0, 'inside', 0, 1, '=' );
    $this->assertTrue ( dpistate_status_ctools_access_check ( $conf ), ' 3 < 4 return true value', 'Dpistate-access' );
    
    $conf = $this->get_conf_array ( 1, 3, '<', 0, 'inside', 0, 1, '=' );
    $this->assertFalse ( dpistate_status_ctools_access_check ( $conf ), ' 3 < 3 return false value', 'Dpistate-access' );
    
    variable_set ( 'dpistate_value_at_moment', $this->old_value );
  }

  function testDpistateAccessNumericBiggerThanFunction() {
    $gen_val = $this->get_default_value ( 3, 'Pâques', 1 );
    // $this->set_new_default_value ( $gen_val, TRUE );
    $this->old_value = variable_get ( 'dpistate_value_at_moment', NULL );
    variable_set ( 'dpistate_value_at_moment', $gen_val );
    
    $conf = $this->get_conf_array ( 1, 2, '>', 0, 'inside', 0, 1, '=' );
    $this->assertTrue ( dpistate_status_ctools_access_check ( $conf ), ' 2 < 3 return true value', 'Dpistate-access' );
    
    $conf = $this->get_conf_array ( 1, 4, '>', 0, 'inside', 0, 1, '=' );
    $this->assertFalse ( dpistate_status_ctools_access_check ( $conf ), ' 4 > 3 return false value', 'Dpistate-access' );
    
    variable_set ( 'dpistate_value_at_moment', $this->old_value );
  }

  function testDpistateAccessNumericEqualsFunction() {
    $gen_val = $this->get_default_value ( 3, 'Pâques', 1 );
    // $this->set_new_default_value ( $gen_val, TRUE );
    $this->old_value = variable_get ( 'dpistate_value_at_moment', NULL );
    variable_set ( 'dpistate_value_at_moment', $gen_val );
    
    $conf = $this->get_conf_array ( 1, 3, '=', 0, 'inside', 0, 1, '=' );
    $this->assertTrue ( dpistate_status_ctools_access_check ( $conf ), ' 3 = 3 return true value', 'Dpistate-access' );
    
    $conf = $this->get_conf_array ( 1, 4, '=', 0, 'inside', 0, 1, '=' );
    $this->assertFalse ( dpistate_status_ctools_access_check ( $conf ), ' 4 = 3 return false value', 'Dpistate-access' );
    
    variable_set ( 'dpistate_value_at_moment', $this->old_value );
  }

  function testDpistateAccessTextFunction() {
    $gen_val = $this->get_default_value ( 3, 'Pâques', 1 );
    // $this->set_new_default_value ( $gen_val, TRUE );
    $this->old_value = variable_get ( 'dpistate_value_at_moment', NULL );
    variable_set ( 'dpistate_value_at_moment', $gen_val );
    
    $conf = $this->get_conf_array ( 0, 3, '=', 0, 'inside', 1, 1, '=' );
    $this->assertTrue ( dpistate_status_ctools_access_check ( $conf ), ' Element selected in the list is the same - return true value', 'Dpistate-access' );
    
    $conf = $this->get_conf_array ( 0, 4, '=', 0, 'inside', 1, 2, '=' );
    $this->assertFalse ( dpistate_status_ctools_access_check ( $conf ), ' Element selected is not the same - return false value', 'Dpistate-access' );
    
    variable_set ( 'dpistate_value_at_moment', $this->old_value );
  }

  function testDpistateAccessDateFunction() {
    $transaction = db_transaction ();
    try {
      // prépare value needed to be tested
      $id = dpistate_api_add_state ( 'dpistate_test_simple_test_date', 2, array (
        $this->get_date_before_to_test ( 1 ),
        $this->get_date_after_to_test ( 1 ) 
      ) );
      $gen_val = array (
        $id => array (
          'actif' => 0,
          'value' => 'Valeur Date' 
        ) 
      );
      $this->old_value = variable_get ( 'dpistate_value_at_moment', NULL );
      variable_set ( 'dpistate_value_at_moment', $gen_val );
      
      $conf = $this->get_conf_date($id, 'inside');
      $this->assertTrue ( dpistate_status_ctools_access_check ( $conf ), 'date into the value is inside the general value - return true', 'Dpistate-access' );
      
      $conf = $this->get_conf_date($id, 'outside');
      $this->assertFalse ( dpistate_status_ctools_access_check ( $conf ), 'date into the value is not outside the general value - return false', 'Dpistate-access' );
      
      // change value to test with value outside
      dpistate_api_update_state_by_id ( 'dpistate_test_simple_test_date', 2, array (
        $this->get_date_before_to_test ( 2 ),
        $this->get_date_before_to_test ( 1 ) 
      ), $id );
      
      $conf = $this->get_conf_date($id, 'inside');
      $this->assertFalse ( dpistate_status_ctools_access_check ( $conf ), 'date into the value is not inside the general value - return false', 'Dpistate-access' );
      
      $conf = $this->get_conf_date($id, 'outside');
      $this->assertTrue ( dpistate_status_ctools_access_check ( $conf ), 'date into the value is outside the general value - return true', 'Dpistate-access' );
      
      variable_set ( 'dpistate_value_at_moment', $this->old_value );
      dpistate_api_delete_state_by_id ( $id );
    } catch ( Exception $e ) {
      $transaction->rollback ();
      $this->assertTrue ( FALSE, 'Problem occured during transaction', 'Dpistate' );
    }
  }
}