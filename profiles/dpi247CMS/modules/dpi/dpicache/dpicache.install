<?php 

function dpicache_enable(){
  _dpicache_esi_sync_drupal_roles_to_esi_visibility();
}
function dpicache_disable(){
  _dpicache_esi_sync_esi_visibility_to_drupal_roles();
}

/**
 * Implementation of hook_schema
 */
function dpicache_schema() {
  $schemas = array();
  $schemas['dpi_variables'] = drupal_get_schema_unprocessed('system', 'variable');
  $schemas['dpi_variables']['description'] = t('Named variable/value pairs created by any other module or theme. These variables are cached but not systematically processed.');
  
  /**
   * dpicache_cron() use this table to regenerate caches
   */
  $schemas['dpicache_cache_entries']=array(
    'description' => 'Each entry represent a cache entry that need to be regenerated during cron.',
    'fields' => array(
      'name' => array(
        'description' => 'Entry name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'hash' => array(
        'description' => 'Hash of entry parameters',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'category' => array(
        'description' => 'Simple way to group caches',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'data_type' => array(
        'description' => 'Is the data a string? an array ?',
        'type' => 'varchar',
        'length' => 25,
        'not null' => FALSE,
      ),
      'creation_date' => array(
        'description' => 'Timestamp of the first generation',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'expiration_date' => array(
        'description' => 'Timestamp when this entry will expire',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'last_run' => array(
        'description' => 'Timestamp of last run.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'update_freq' => array(
        'description' => 'Update frenquency, in seconds',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parameters' => array(
        'description' => 'Real parameters to pass to the callback function',
        'type' => 'text',
        'not null' => TRUE
      ),
    ),
    'indexes' => array(
      'name'                => array('name'),
      'expiration_date' => array('expiration_date'),
    ),
    'primary key' => array('name','hash'),
  );

  /**
   * Default storage engine for DPIcache cold cache
   */
  $schemas['cache_dpicache'] = drupal_get_schema_unprocessed('system', 'cache');
  $schemas['cache_dpicache']['description'] = "Cache table for dpicache cache system (default storage).";

  return $schemas;
}








/**
 * Implements hook_schema().
 */
function dpicache_schema_alter(&$schema = array()) {
  // Add columns to the block schema, to record if a block should be processed
  // by ESI, and its TTL.
  // Adding to the schema is the most performant way to integrate, because the
  // data is immediately available with no extra lookups.
  $schema['block']['fields']['esi_enabled'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => FALSE,
    'default' => 0,
    'description' => 'Should block be served via ESI.',
  );
  $schema['block']['fields']['esi_ttl'] = array(
    'type' => 'int',
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'Time-to-live (in seconds) for the block contents when served via ESI.',
  );
  $schema['block']['fields']['esi_roles'] = array(
    'type' => 'blob',
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'Esi role visibility.',
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function dpicache_install() {
  $schema = dpicache_schema_alter();
  foreach($schema['block']['fields'] as $field_name => $spec) {
    db_add_field('block', $field_name, $spec);
  }

  // @TODO: iterate through the variable "dpicache_config" and push to the
  // block table.
  if ($old_configuration = variable_get('dpicache_config', array())) {
    foreach ($old_configuration as $key => $config) {
      // The key is $module_$delta...which unfortunately makes things slightly
      // trickier...Is "dpicache_foo_bar" "esi":"block_foo_bar" or
      // "dpicache":"foo_bar"? Hard to say!

      // Remove the old variable once it's migrated.
      variable_del('dpicache_config');
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function dpicache_uninstall() {
  // Remove the columns that were added to the 'block' table in hook_install().
  $schema = dpicache_schema_alter();
  foreach($schema['block']['fields'] as $field_name => $spec) {
    db_drop_field('block', $field_name);
  }

  // Remove obsolete variables.
  variable_del('dpicache_default_ttl');
}

function dpicache_update_7001() {
 
  $schema['block']['fields']['esi_enabled'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => FALSE,
    'default' => 0,
    'description' => 'Should block be served via ESI.',
  );
  db_add_field( 'block', 'esi_enabled', $schema['block']['fields']['esi_enabled']);
  
  $schema['block']['fields']['esi_ttl'] = array(
    'type' => 'int',
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'Time-to-live (in seconds) for the block contents when served via ESI.',
  );
  db_add_field( 'block', 'esi_ttl', $schema['block']['fields']['esi_ttl']);
  
  $schema['block']['fields']['esi_roles'] = array(
    'type' => 'blob',
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'Esi role visibility.',
  );
  db_add_field( 'block', 'esi_roles', $schema['block']['fields']['esi_roles']);
  
}

