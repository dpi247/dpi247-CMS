<?php 

function dpidestinations_schema() {
  $schema['dpidestinations_target'] = array (
    'description' => 'The target entity table',
    'fields' => array(
      'targetid' => array(
        'description' => 'Primary key for our table of target',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'label' => array(
        'description' => 'The label of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'description' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Administrative description for this target.',
        'object default' => '',
      ),
      'view_name' => array(
        'type'=>'varchar',
        'length' => 64,
        'not null' => TRUE
      ),
      'view_display' =>array(
        'type'=>'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'available_targetlayouts' => array(
        'description' => 'Wich target layout are available for this target.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'available_templateoverrides' => array(
        'description' => 'Allow Webmaster to override template logic by choosing a fixed template',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => ENTITY_CUSTOM,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('targetid'),
  );

  $schema['dpidestinations_targetblock'] = array (
    'description' => 'The target entity table',
    'fields' => array(
      'targetblockid' => array(
        'description' => 'Primary key for our table of target',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
     
      'target' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'did' => array(
        'description' => 'The ctools page manager display id (did)',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'pid' => array(
        'description' => 'The ctools page manager panel id (pid)',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'node_count_for_targetblockinstance' => array(
        'description' => 'The machine name of the target',
        'type' => 'int',
        'not null' => TRUE
      ),
      'template_rule'=> array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'hide_pager' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'node_count_for_targetblock' => array(
        'description' => 'The machine name of the target',
        'type' => 'int',
        'not null' => TRUE
      ),
      'use_pager' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'pager_type' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'rank_max_value'=>array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The maximum rank value.'
      ),
      'use_split' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'offset' => array(
        'description' => 'The machine name of the target',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'split_delta' => array(
        'description' => 'The machine name of the target',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => ENTITY_CUSTOM,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('targetblockid'),
  );
  
  $schema['dpidestinations_targetblock_config'] = array (
    'description' => 'The target entity table config',
    'fields' => array(
      'targetblock_name' => array(
        'description' => 'the config manchine name',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'serialize_conf' => array(
        'description' => 'the serialize information for config targetblock',
        'type' => 'varchar',
        'length' => '1000',
        'not null' => TRUE
      ),
    ),
    'primary key' => array('targetblock_name'),
  );
  
  /*
   $schema['dpidestinations_destinationvariant'] = array (
     'description' => 'The target entity table',
     'fields' => array(
       'page_manager_handlers_did' => array(
         'description' => 'The machine name of the target',
         'type' => 'varchar',
         'length' => '255',
         'not null' => TRUE
       ),
       'pager_override' => array(
         'description' => 'The machine name of the target',
         'type' => 'varchar',
         'length' => '255',
         'not null' => TRUE
       ),
       'split_flag' => array(
         'description' => 'The machine name of the target',
         'type' => 'varchar',
         'length' => '255',
         'not null' => TRUE
       ),
       'split_number' => array(
         'description' => 'The machine name of the target',
         'type' => 'varchar',
         'length' => '255',
         'not null' => TRUE
       ),
       'split_total' => array(
         'description' => 'The machine name of the target',
         'type' => 'varchar',
         'length' => '255',
         'not null' => TRUE
       ),
       'status' => array(
         'type' => 'int',
         'not null' => TRUE,
         // Set the default to ENTITY_CUSTOM without using the constant as it is
         // not safe to use it at this point.
         'default' => ENTITY_CUSTOM,
         'size' => 'tiny',
         'description' => 'The exportable status of the entity.',
       ),
       'module' => array(
         'description' => 'The name of the providing module if the entity has been defined in code.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
       ),
     ),
     'primary key' => array('targetblockid'),
   );
  */
  
//  $schema['dpidestinations_topic_term_elu'] = array (
//    'description' => 'Informations about topic term elu. This table gonna sav informations to restore after election.',
//    'fields' => array(
//      'topicid' => array(
//        'description' => 'Primary key for our table of topic term elu',
//        'type' => 'serial',
//        'unsigned' => TRUE,
//        'not null' => TRUE,
//      ),
//      'tid' => array(
//        'type' => 'int',
//        'not null' => TRUE,
//        'description' => 'This is the term id from my term.',
//      ),
//      'tvalue' => array(
//        'type' => 'varchar',
//        'length' => '1000',
//        'not null' => TRUE,
//        'description' => 'This is the varchar value of the term.',
//      ),
//      'originalurls' => array(
//        'type' => 'varchar',
//        'length' => '1000',
//        'not null' => TRUE,
//        'description' => 'This is the term id from my term.',
//      ),
//      'newurls' => array(
//        'type' => 'int',
//        'type' => 'varchar',
//        'length' => '1000',
//        'not null' => TRUE,
//        'description' => 'This is the term id from my term.',
//      ),
//      'timestamptodelete' => array(
//        'description' => 'This time is gonna set after suppression term to redirect user one week after deletation',
//        'type' => 'varchar',
//        'length' => '1000',
//        'not null' => FALSE,
//      ),
//    ),
//    'primary key' => array('topicid'),
//  );

  return $schema;
}

function dpidestinations_install(){
  _dpidestinations_variable_set("dpidestinations_targetview_reorder_default", array("targetview_reorder_default", "targetview_1"));
  _dpidestinations_variable_set("dpidestinations_virtualrank_delta", 1000);
   
  $edit = array(
    "name" => "Sections",
    "machine_name" =>"sections",
    "description" => t("Sections represent the structure of your editorial content."),
    "module" => "taxonomy",
  );

  $vocabulary = (object)$edit;
  taxonomy_vocabulary_save($vocabulary);
  _dpidestinations_variable_set('dpidestinations_section_vid', $vocabulary->vid);

  $field_info=_dpidestination_get_field_info_for_destination();
  field_create_field($field_info);
  _dpidestination_attach_field_destination_to_bundle('node', 'package');
  _dpidestination_attach_field_destination_to_bundle('node', 'package_gallery');
  
  // Add "view section" permission to anonymous and authenticated user roles
  $rids = array(1, 2);
  $permissions = array('view section');
  foreach ($rids as $rid) {
    user_role_grant_permissions($rid, $permissions);
  }
}

function dpidestinations_uninstall(){
  taxonomy_vocabulary_delete( _dpidestinations_variable_get('dpidestinations_section_vid', 2));
  _dpidestinations_variable_del("dpidestinations_targetview_reorder_default");
  _dpidestinations_variable_del("dpidestinations_virtualrank_delta");
  _dpidestinations_variable_del("dpidestinations_section_vid");
  _dpidestinations_variable_del("dpidestination_max_reserved_position");
  _dpidestinations_variable_del("dpidestination_default_max_reserved_position");
}

/**
 * Implements hook_field_schema().
 *
 * Defines the database schema of the field, using the format used by the
 * Schema API.
 *
 * The data we will store here is just one 7-character element, even
 * though the widget presents the three portions separately.
 *
 * All implementations of hook_field_schema() must be in the module's
 * .install file.
 *
 * @see http://drupal.org/node/146939
 * @see schemaapi
 * @see hook_field_schema()
 * @ingroup field_example
 */
function dpidestinations_field_schema($field) {
  $columns = array(
    'tid' => array('type' => 'int', 'size' => 'medium', 'not null' => TRUE),
    'target' => array('type' => 'varchar', 'length' => 254, 'not null' => FALSE),
    'layout' => array('type' => 'varchar', 'length' => 254, 'not null' => FALSE),
    'rank' => array('type' => 'int', 'size' => 'medium', 'not null' => FALSE),
    'virtual_rank' => array('type' => 'int',  'size' => 'big','not null' => FALSE),
  );

  $indexes = array(
    'tid' => array('tid'),
    'virtual_rank' => array('virtual_rank'),
  );

  $unique_keys = array('unique' => array('tid', 'target'));

  return array(
    'columns' => $columns,
    'indexes' => $indexes,
    'unique keys' => $unique_keys,
  );
}

/**
 * Add "view section" permission to anonymous and authenticated user roles
 */
function dpidestinations_update_7001() {
  $rids = array(1, 2);
  $permissions = array('view section');
  foreach ($rids as $rid) {
    user_role_grant_permissions($rid, $permissions);
  }
}

function dpidestinations_update_7002() {
  _dpidestination_attach_field_destination_to_bundle('node', 'package_gallery');
}

/**
 * Create targetblock config table
 */
function dpidestinations_update_7003() {
  if (!db_table_exists('dpidestinations_targetblock_config')) {
    $schema = drupal_get_schema('dpidestinations_targetblock_config', TRUE);
    db_create_table('dpidestinations_targetblock_config', $schema);
  }
}
