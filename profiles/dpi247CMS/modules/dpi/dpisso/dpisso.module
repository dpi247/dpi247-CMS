<?php
module_load_include ( 'inc', 'dpisso', 'dpisso.api' );
module_load_include ( 'inc', 'dpisso', 'dpisso.private' );

define ( 'DPISSO_ACCESSTOKEN_COOKIE_NAME', "dpisso-access-token" );
define ( 'DPISSO_LONTERM_COOKIE_NAME', "dpisso-longterm" );


/**
 * Implementation of hook_menu()
 */
function dpisso_menu() {
  $items = array ();
  
  $items [DPI_ADMIN_PATH . '/dpisso'] = array (
    'title' => t ( 'DPI SSo Settings' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'dpisso_loginmanager_admin_settings_page_form' 
    ),
    'access arguments' => array (
      'administer dpisso' 
    ),
    'description' => t ( 'Manage SSO&Paywall settings' ),
    'file' => 'includes/dpisso.pages.general.admin.inc' 
    );
  
  $items [DPI_ADMIN_PATH . '/dpisso/general'] = array (
    'title' => t ( 'General Settings' ),
    'access arguments' => array (
      'administer dpisso' 
    ),
    'weight' => - 10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'file' => 'dpisso.pages.general.admin.inc' 
  );
  
  $items [DPI_ADMIN_PATH . '/dpisso/loginmanager'] = array (
    'title' => t ( 'Login Manager' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'dpisso_loginmanager_admin_settings_page_form' 
    ),
    'access arguments' => array (
      'administer dpisso' 
    ),
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'file' => 'dpisso.pages.loginmanager.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK 
  );
  
  $items [DPI_ADMIN_PATH . '/dpisso/accessmanager'] = array (
    'title' => t ( 'Access Manager' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'dpisso_accessmanager_admin_settings_page_form' 
    ),
    'access arguments' => array (
      'administer dpisso' 
    ),
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'file' => 'dpisso.pages.accessmanager.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK 
  );
  
  $items [DPI_ADMIN_PATH . '/dpisso/paywall'] = array (
    'title' => t ( 'Paywall' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'dpisso_paywall_admin_settings_page_form' 
    ),
    'access arguments' => array (
      'administer dpisso' 
    ),
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'file' => 'dpisso.pages.paywall.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK 
  );
  
  $items [DPI_ADMIN_PATH . '/dpisso/bypasspaywall'] = array (
    'title' => t ( 'Bypass paywall' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'dpisso_bypasspaywall_admin_settings_page_form'
    ),
    'access arguments' => array (
      'administer dpisso'
    ),
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'file' => 'dpisso.bypasspaywall.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK
  );
  
  $items ['dpisso/login'] = array (
    'title' => t ( 'Login' ),
    'page callback' => '_dpisso_login_callback',
    'access arguments' => array (
      'administer dpisso' 
    ),
    'file' => 'dpisso.pages.accessmanager.admin.inc',
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK 
  );
  
  $items ['dpisso/login'] = array (
    'title' => t ( 'Login' ),
    'page callback' => '_dpisso_login_callback',
    'access arguments' => array (
      'administer dpisso' 
    ),
    'file' => 'dpisso.pages.accessmanager.admin.inc',
    'file path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK 
  );
  
  return $items;
}

/**
 * Implements hook_block_info()
 * @return Array
 */
function dpisso_block_info() {
  $blocks = array ();
  $blocks ['dpisso_connect'] = array (
    'info' => t ( 'dpisso_connect' ),
    'cache' => DRUPAL_NO_CACHE 
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 * @param String $delta
 * @return Array
 */
function dpisso_block_view($delta = '') {
  switch ($delta) {
    case 'dpisso_connect' :
      $block = array (
        'subject' => t ( 'dpisso_content' ),
        'content' => dpisso_get_connect_form () 
      );
      break;
  }
  return $block;
}

/**
 * Create form for connection to ssoV2
 * @return type
 */
function dpisso_get_connect_form() {
  libraries_load ( 'ssophptoolbox' );
  if (file_exists ( DRUPAL_ROOT . '/sites/all/libraries/ssophptoolbox/config.json' )) {
    $ssoSession = new SsoSession ( DRUPAL_ROOT . '/sites/all/libraries/ssophptoolbox/config.json' );
    $config = $ssoSession->config;
    if ($unitId = $config->LM_unitId) {
      if (user_is_anonymous ()) {
        $return = l ( 'Login', dpisso_get_login_url($config->login, $unitId), array (
          'attributes' => array (
            'class' => 'btn blue' 
          ) 
        ) );
      } else {
        $return = l ( 'Logout', dpisso_get_logout_url($config->login, $unitId), array (
          'attributes' => array (
            'class' => 'btn blue' 
          ) 
        ) );
      }
    } else {
      $return = t ( 'Connexion service not available' );
    }
  } else {
    $return = t ( 'Connexion service not available, install libraries to use it.' );
  }
  return $return;
}

/**
 * Implementation of hook_permission()
 */
function dpisso_permission() {
  return array (
    'administer dpisso' => array (
      'title' => t ( 'Administer DPISSO' ) 
    ) 
  );
}

/**
 * Implementation of hook_theme()
 */
function dpisso_theme() {
  return array (    
    'formtable_form_table' => array (
      'render element' => 'form',
      'file' => 'dpisso.pages.paywall.admin.inc',
      'path' => drupal_get_path ( 'module', 'dpisso' ) . '/includes' 
    ) 
  );
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Has plenty options.
 * @See ctools/help/plugins-creating.html
 */
function dpisso_ctools_plugin_type() {
  return array (
    'paywallpolitic' => array (
      'use hooks' => TRUE 
    ) 
  );
}



/**
 * Implements hook_ctools_plugin_directory().
 *
 * @see dpisso_ctools_plugin_type()
 */
function dpisso_ctools_plugin_directory($module, $plugin) {
    if (($module == 'dpisso') && ($plugin == 'paywallpolitic')) {
        return 'plugins/paywallpolitics';
    }
    if(($module == 'ctools') && ($plugin == 'access')){
        return 'plugins/access';
    }
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function dpisso_libraries_info() {
  $libraries ['ssophptoolbox'] = array (
    'name' => 'Dpisso library',
    'vendor url' => 'https://gitlab.audaxis.com/dpi247/ssophptoolbox.git',
    'download url' => 'https://gitlab.audaxis.com/dpi247/ssophptoolbox.git',
    'version callback' => 'dpisso_get_version',
    'version arguments' => array (
      'file' => 'dpissolib.readme',
      'pattern' => '/Version (\d+)/',
      'lines' => 5 
    ),
    'files' => array (
      'php' => array (
        'Config.class.php',
        'SsoException.class.php',
        'SsoComponent.class.php',
        'AccessManager.class.php',
        'LoginManager.class.php',
        'SsoSession.class.php' 
      ) 
    ) 
  );
  return $libraries;
}

/*
 * Get the ssoCLient Config from file. @return array All the configuration elements.
 */
function dpisso_get_config() {
  libraries_load ( "ssophptoolbox" );
  if (! is_file ( dpi_variable_get ( 'ssoClienInitFile', '' ) )) {
    $ssoconfig = NULL;
  } else {
    $ini_file = dpi_variable_get ( 'ssoClienInitFile', '' );
    $ssoSession = new SsoSession($ini_file);
    $ssoconfig = $ssoSession->config;
  }
  return ($ssoconfig);
}

/**
 * Get federation from ssophptoolbox configuration
 * @return new stdClass
 */
function dpisso_get_federation() {
  libraries_load ( "ssophptoolbox" );
  if (! is_file ( dpi_variable_get ( 'dpisso_loginmanager_domain', '' ) )) {
    $ssoFederationConfig = array ();
  } else {
    $ini_file = dpi_variable_get ( 'dpisso_loginmanager_domain', '' );
    $string = file_get_contents ( $ini_file );
    $ssoFederationConfig = json_decode ( $string, true );
  }
  return ($ssoFederationConfig);
}

/**
 * Return number of dpisso version
 * @return Integer
 */
function dpisso_get_version() {
  return TRUE;
}

/**
 * This function upda te role from access manager to drupal
 * @return boolean
 */
function dpisso_update_role_for_access_manager_to_drupal() {
  $return = FALSE;
  if (is_array ( libraries_load ( "ssophptoolbox" ) ) && file_exists(DRUPAL_ROOT . "/sites/all/libraries/ssophptoolbox/AccessManager.class.php")) {
    $ssoSession = new SsoSession( DRUPAL_ROOT . '/sites/all/libraries/ssophptoolbox/config.json' );
    $roles = $ssoSession->accessManager->getRoleList();
    if (isset ( $roles )) {
      if (dpisso_accessmanager_synchro_roles ( $roles->services )) {
        $return = TRUE;
      }
    }
  }
  return $return;
}

/**
 * This function create role is not exist.
 * Parameter is a simple array with all informtions.
 *
 * @param array $roles
 *          - array with new roles
 */
function dpisso_accessmanager_synchro_roles($roles) {
  if (is_array ( $roles )) {
    try {
      foreach ( $roles as $role ) {
        if (user_role_load_by_name ( $role ) == FALSE) {
          $new_role = new stdClass ();
          $new_role->name = $role;
          user_role_save ( $new_role );
        }
      }
      return TRUE;
    } catch ( Exception $e ) {
      return FALSE;
    }
  } else {
    return FALSE;
  }
}

/**
 * Implements cron function
 */
function dpisso_cron() {
  if (variable_get ( 'dpisso_role_run_cron', FALSE )) {
    if (dpisso_update_role_for_access_manager_to_drupal ()) {
      watchdog ( 'dpisso_role', 'Dpisso role updated' );
    } else {
      watchdog ( 'dpisso_role', 'Dpisso role update occured an error' );
    }
  }
}

/**
 * Implements hook_token_info()
 * @return array
 */
function dpisso_token_info() {
  $info['tokens']['user']['ssoLogin'] = array(
    'name' => t('Sso login token'),
    'description' => t('Return the login id for the user'),
  );
  return $info;
}

/**
 * Implementations of hook_tokens()
 * @param String $type
 * @param array $tokens
 * @param array $data
 * @param array $options
 * @return array
 */
function dpisso_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'user') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'ssoLogin':
          libraries_load ( "ssophptoolbox" );
          $ssoSession = new SsoSession ( DRUPAL_ROOT . '/sites/all/libraries/ssophptoolbox/config.json' );          
          $name = "anonymous";
          if(user_is_logged_in()){
            global $user;
            $name = $user->name;
          }elseif(isset($ssoSession->config->anonymousId_cookie_name) && $ssoSession->config->anonymousId_cookie_name!="" && isset($_COOKIE[$ssoSession->config->anonymousId_cookie_name])){
            $name = $_COOKIE[$ssoSession->config->loginToken_cookie_name];
          }
          $replacements[$original] = $name;
          break;        
      }
    }
  }
  return $replacements;
}
