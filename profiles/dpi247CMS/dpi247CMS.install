<?php
/**
 * @file
 * Install, update and uninstall functions for the minimal installation profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function dpi247CMS_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  $admin_theme = 'shiny';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  if (module_exists('dashboard')) {
    $blocks[] = array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    );
    $blocks[] = array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    );
  }
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $admin_theme)
    ->execute();
  variable_set('admin_theme', $admin_theme);
  variable_set('node_admin_theme', '1');
}

/**
 * Implementation of hook_install_tasks
 *
 * @param Array $install_state
 */
function dpi247CMS_install_tasks($install_state) {
  $tasks = array();

  // Set the taxonomy vid into dpi_variable
  $tasks['set_taxonomy_variable'] = array(
    'display_name' => st('Set taxonomy variables'),
    'display' => TRUE,
    'type' => 'normal',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'dpi247CMS_install_set_taxonomy_variables',
  );

  // Install demo contents
  $tasks['install_demo_contents'] = array(
    'display_name' => st('Install demo contents'),
    'display' => TRUE,
    'type' => 'form',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'dpi247CMS_install_demo_contents_form',
  );
  
  // Store variant in DB
  $tasks['store_variant_in_db'] = array(
    'display_name' => st('Store some variants in DB'),
    'display' => TRUE,
    'type' => 'normal',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'dpi247CMS_store_variant_in_db',
  );

  return $tasks;
}

/**
 * @see _dpicommons_finalize_install_process
 */
function dpi247CMS_store_variant_in_db(){
  
  
  drupal_set_message("DPIProfileFull");
  /*
  global $conf;
  
  module_load_all(DRUPAL_BOOTSTRAP_FULL);
  
  
  //$conf['cache_default_class'] ="DrupalDatabaseCache";
  drupal_flush_all_caches();
  drupal_static_reset("ctools_export_load_object");
  drupal_static_reset("ctools_export_load_object_table_exists");
  drupal_static_reset("ctools_export_load_object_all");
  drupal_static_reset("_ctools_export_get_defaults");
  drupal_static_reset("ctools_object_cache_get");
  
  
  
  //Special treatement for pages cuz they include several object better reliable to use the "API"
  module_load_include('inc', 'page_manager', 'page_manager.admin');
  $page=dpi247CMS_build_page_manager_cache_load('term_view');
  foreach($page->handler_info as $key=>$value){
    $page->handler_info[$key]['changed'] = PAGE_MANAGER_CHANGED_CACHED;
  }
  dsm($page);
  page_manager_save_page_cache($page);
  
  //Special treatement for pages cuz they include several object better reliable to use the "API"
  module_load_include('inc', 'page_manager', 'page_manager.admin');
  $page=dpi247CMS_build_page_manager_cache_load('sections');
  foreach($page->handler_info as $key=>$value){
    dsm('key'.$key);
    $page->handler_info[$key]['changed'] = PAGE_MANAGER_CHANGED_CACHED;
  }
  
  $conf['toto']="toto";
  page_manager_save_page_cache($page);

  $conf['toto']="tata";
  */
  
  
  
}


/**
 * Set the taxonomy vid into dpi_variable
 */
function dpi247CMS_install_set_taxonomy_variables() {
  // Set the vid of the vocabulary in dpi_variable_set
  dpi247CMS_install_set_a_taxonomy_variable("authors");
  dpi247CMS_install_set_a_taxonomy_variable("concepts");
  dpi247CMS_install_set_a_taxonomy_variable("entities");
  dpi247CMS_install_set_a_taxonomy_variable("freetags");
  dpi247CMS_install_set_a_taxonomy_variable("iptc");
  dpi247CMS_install_set_a_taxonomy_variable("locations");
  dpi247CMS_install_set_a_taxonomy_variable("packagelayout");
  dpi247CMS_install_set_a_taxonomy_variable("persons");
  dpi247CMS_install_set_a_taxonomy_variable("rating");
}

/**
 * Get the vid of a vocabulary by its name and set it in a dpi_variale
 *
 * @param String $name
 */
function dpi247CMS_install_set_a_taxonomy_variable($name){
  $result = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = :machine_name", array(':machine_name' => $name));
  $vid = NULL;

  foreach ($result as $record) {
    $vid = $record->vid;
  }

  dpi_variable_set('dpi_'.$name, $vid);
  return $vid;
}

/**
 * Demo contents installation configuration form
 */
function dpi247CMS_install_demo_contents_form($form, &$form_state, &$install_state) {
  drupal_set_title(st('Install demo contents'));

  $form['install_demo_contents'] = array(
    '#type' => 'fieldset',
    '#title' => st('Install demo contents'),
    '#collapsible' => FALSE,
  );

  $form['install_demo_contents']['theme_theunfold'] = array(
    '#type' => 'checkbox',
    '#title' => st('Use TheUnfold theme'),
    '#default_value' => 1,
  );

  $form['install_demo_contents']['demo_contents'] = array(
    '#type' => 'checkbox',
    '#title' => st('Add demo contents (formatters, user roles, etc.)'),
    '#default_value' => 0,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Save and continue'),
  );

  return $form;
}

function dpi247CMS_install_demo_contents_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['demo_contents'] && !$values['theme_theunfold']) {
    form_error($form['install_demo_contents']['demo_contents'], t('You have to enable TheUnfold theme to install demo contents!'));
  }
}

function dpi247CMS_install_demo_contents_form_submit($form, $form_state) {
  $values = $form_state['values'];
  if ($values['theme_theunfold']) {
    _dpi247CMS_install_demo_contents_minimal();
    if ($values['demo_contents']) {
      _dpi247CMS_install_demo_contents_full();
    }
  } else {
    _dpi247CMS_install_default_contents();
  }
}

/**
 * Install the minimal demo contents configurations
 */
function _dpi247CMS_install_demo_contents_minimal() {
  theme_enable(array('theunfold'));
  theme_disable(array('bartik'));
  variable_set('theme_default', 'theunfold');

  module_enable(array('unfoldcompanionminimal'));

  // Activate the node edit page in the page manager
  module_load_include('admin.inc', 'page_manager');
  // Load context plugin as there may be contexts cached here.
  ctools_include('context');
  $enable_pages = array('node_edit');
  foreach ($enable_pages as $enable_page) {
    $page = page_manager_get_page_cache($enable_page);
    if ($function = ctools_plugin_get_function($page->subtask, 'enable callback')) {
      $function($page, FALSE);

      // We want to re-cache this if it's changed so that status is properly
      // updated on the changed form.
      if (!empty($page->changed)) {
        page_manager_set_page_cache($page);
      }
    }
  }
  
  //import taxonomy_menu config:
  $form2=array();
  $form_state2['values']['vid']=_dpidestinations_variable_get('dpidestinations_section_vid', 0);
  $form_state2['values']['taxonomy_menu']['vocab_parent']="main-menu:0";
  $form_state2['values']['taxonomy_menu']['path']="taxonomy_menu_path_default";
  $form_state2['values']['taxonomy_menu']['options']=unserialize('a:12:{s:4:"sync";i:1;s:11:"display_num";i:0;s:16:"hide_empty_terms";i:0;s:8:"voc_item";b:0;s:20:"voc_item_description";i:0;s:21:"term_item_description";i:0;s:8:"expanded";i:1;s:4:"flat";i:0;s:8:"voc_name";b:0;s:19:"display_descendants";i:0;s:7:"end_all";b:0;s:7:"rebuild";i:0;}');
  _dpi247CMS_taxonomy_menu_vocab_submit($form2, $form_state2);
}

/**
 * Install the full demo contents configurations
 */
function _dpi247CMS_install_demo_contents_full() {
  module_enable(array('unfoldcompanion'));

  // Add default destinations terms
  $dest_voc = 'sections';
  $dest_vid = _dpidestinations_variable_get('dpidestinations_section_vid', 0);
  if ($dest_vid) {
    $base_term = new stdClass();
    $base_term->vid = $dest_vid;
    $base_term->weight = 0;
    $base_term->vocabulary_machine_name = $dest_voc;
    $terms = array('News', 'Politics', 'Sports', 'Economy');
    foreach ($terms as $term) {
      $base_term->weight++;
      $copied_term = clone $base_term;
      $copied_term->name = $term;
      taxonomy_term_save($copied_term);
    }
    
  }
  

  // Add default destinations terms
  $packlayout_voc = 'packagelayout';
  $packlayout_vid = dpi_variable_get('dpi_packagelayout', 0);;
  if ($packlayout_vid) {
    $base_term = new stdClass();
    $base_term->vid = $packlayout_vid;
    $base_term->weight = 0;
    $base_term->vocabulary_machine_name = $packlayout_voc;
    $terms = array('Article');
    foreach ($terms as $term) {
      $base_term->weight++;
      $copied_term = clone $base_term;
      $copied_term->name = $term;
      taxonomy_term_save($copied_term);
    }
  }

  
  
  // Activate the sections and the node pages in the page manager
  module_load_include('admin.inc', 'page_manager');
  // Load context plugin as there may be contexts cached here.
  ctools_include('context');
  $enable_pages = array('sections', 'node_view');
  foreach ($enable_pages as $enable_page) {
    $page = page_manager_get_page_cache($enable_page);
    if ($function = ctools_plugin_get_function($page->subtask, 'enable callback')) {
      $function($page, FALSE);

      // We want to re-cache this if it's changed so that status is properly
      // updated on the changed form.
      if (!empty($page->changed)) {
        page_manager_set_page_cache($page);
      }
    }
  }

  // Set the "News" section page as home page
  variable_set('site_frontpage', 'section/1');
  
  
  
  
}

function _dpi247CMS_install_default_contents() {
}



function _dpi247CMS_taxonomy_menu_vocab_submit($form, &$form_state) {
  $vid = $form_state['values']['vid'];
  $changed = FALSE;

  if (is_numeric($form_state['values']['taxonomy_menu']['vocab_parent'])) {
    // Menu location has been set to disabled, don't want to throw notices
    $form_state['values']['taxonomy_menu']['vocab_parent'] = '0:0';
  }

  // Split the menu location into menu name and menu item id.
  list($vocab_parent['vocab_menu'], $vocab_parent['vocab_parent']) = explode(':', $form_state['values']['taxonomy_menu']['vocab_parent']);

  // Init flag variables to avoid notices if changes haven't happened
  $changed_menu = FALSE;
  $change_vocab_item = FALSE;
  $changed_path = FALSE;

  // Set the menu name and check for changes
  $variable_name = _taxonomy_menu_build_variable('vocab_menu', $vid);
  if (_taxonomy_menu_check_variable($variable_name, $vocab_parent['vocab_menu'])) {
    $changed_menu = TRUE;
  }
  variable_set($variable_name, $vocab_parent['vocab_menu']);

  // Set the menu parent item and check for changes
  $variable_name = _taxonomy_menu_build_variable('vocab_parent', $vid);
  if (_taxonomy_menu_check_variable($variable_name, $vocab_parent['vocab_parent'])) {
    $changed_menu = TRUE;
  }
  variable_set($variable_name, $vocab_parent['vocab_parent']);

  // Set the path and check for changes
  $variable_name = _taxonomy_menu_build_variable('path', $vid);
  if (_taxonomy_menu_check_variable($variable_name, $form_state['values']['taxonomy_menu']['path'])) {
    $changed_path = TRUE;
  }
  variable_set($variable_name, $form_state['values']['taxonomy_menu']['path']);

  foreach ($form_state['values']['taxonomy_menu']['options'] as $key => $value) {
    // Create the variable name
    $variable_name = _taxonomy_menu_build_variable($key, $vid);

    // Check to see if the vocab enable options has changed
    if ($key == 'voc_item') {
      if (_taxonomy_menu_check_variable($variable_name, $value)) {
        $change_vocab_item = TRUE;
      }
    }

    // If $changed is alreayd set to true, then don't bother checking any others.
    if (!$changed) {
      // Check to see if the variable has changed.
      if (_taxonomy_menu_check_variable($variable_name, $value)) {
        $changed = TRUE;
      }
    }
    // Save variable.
    variable_set($variable_name, $value);
  }

}

function dpi247CMS_install_tasks_alter(&$tasks, $install_state){
  
 //print "<pre>".print_r($tasks,1)."</pre>";
 unset($tasks['install_finished']);
 
 $tasks['dpi247CMS_install_finished']=array("display_name"=>"finished");
 
}

/**
 * Finishes importing files at end of installation.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 *
 * @return
 *   A message informing the user that the installation is complete.
 */
function dpi247CMS_install_finished(&$install_state) {
  $output=install_finished($install_state);
  $output.='<iframe src="/finalize_install_process"></iframe>';
  return $output;
}
